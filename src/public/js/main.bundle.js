/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,n)=>{"use strict";n.r(t);var a=n("./src/js/data/config.js"),o=n("./src/js/utils/detector.js"),i=n("./src/js/app/main.js");n("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(o.default.webgl){var e=document.getElementById("appContainer");new i.default(e)}else o.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t.domElement.width,r=t.domElement.height;this.threeCamera=new a.PerspectiveCamera(o.default.camera.fov,i/r,o.default.camera.near,o.default.camera.far),this.threeCamera.position.set(o.default.camera.posX,o.default.camera.posY,o.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return n.updateSize(t)}),!1)}var t,n,r;return t=e,(n=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&i(t.prototype,n),r&&i(t,r),e}()},"./src/js/app/components/controls.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/utils/orbitControls.js"),i=n.n(o),r=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=new(i())(a);this.threeControls=new o(t,n),this.init()}var t,n,o;return t=e,(n=[{key:"init",value:function(){this.threeControls.target.set(r.default.controls.target.x,r.default.controls.target.y,r.default.controls.target.z),this.threeControls.autoRotate=r.default.controls.autoRotate,this.threeControls.autoRotateSpeed=r.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=r.default.controls.rotateSpeed,this.threeControls.zoomSpeed=r.default.controls.zoomSpeed,this.threeControls.minDistance=r.default.controls.minDistance,this.threeControls.maxDistance=r.default.controls.maxDistance,this.threeControls.minPolarAngle=r.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=r.default.controls.maxPolarAngle,this.threeControls.enableDamping=r.default.controls.enableDamping,this.threeControls.enableZoom=r.default.controls.enableZoom,this.threeControls.dampingFactor=r.default.controls.dampingFactor}}])&&s(t.prototype,n),o&&s(t,o),e}()},"./src/js/app/components/light.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){this.ambientLight=new a.AmbientLight(o.default.ambientLight.color),this.ambientLight.visible=o.default.ambientLight.enabled,this.pointLight=new a.PointLight(o.default.pointLight.color,o.default.pointLight.intensity,o.default.pointLight.distance),this.pointLight.position.set(o.default.pointLight.x,o.default.pointLight.y,o.default.pointLight.z),this.pointLight.visible=o.default.pointLight.enabled,this.directionalLight=new a.DirectionalLight(o.default.directionalLight.color,o.default.directionalLight.intensity),this.directionalLight.position.set(o.default.directionalLight.x,o.default.directionalLight.y,o.default.directionalLight.z),this.directionalLight.visible=o.default.directionalLight.enabled,this.directionalLight.castShadow=o.default.shadow.enabled,this.directionalLight.shadow.bias=o.default.shadow.bias,this.directionalLight.shadow.camera.near=o.default.shadow.near,this.directionalLight.shadow.camera.far=o.default.shadow.far,this.directionalLight.shadow.camera.left=o.default.shadow.left,this.directionalLight.shadow.camera.right=o.default.shadow.right,this.directionalLight.shadow.camera.top=o.default.shadow.top,this.directionalLight.shadow.camera.bottom=o.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=o.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=o.default.shadow.mapHeight,o.default.isDev&&(this.directionalLightHelper=new a.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=o.default.shadow.helperEnabled),this.hemiLight=new a.HemisphereLight(o.default.hemiLight.color,o.default.hemiLight.groundColor,o.default.hemiLight.intensity),this.hemiLight.position.set(o.default.hemiLight.x,o.default.hemiLight.y,o.default.hemiLight.z),this.hemiLight.visible=o.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),o.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&i(t.prototype,n),r&&i(t,r),e}()},"./src/js/app/components/material.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js");function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;o(this,e),this.basic=new a.MeshBasicMaterial({color:t,side:a.DoubleSide}),this.standard=new a.MeshStandardMaterial({color:t,shading:a.FlatShading,roughness:1,metalness:0,side:a.DoubleSide}),this.wire=new a.MeshBasicMaterial({wireframe:!0}),this.points=new a.PointsMaterial({size:n,color:t})}},"./src/js/app/components/particles.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/app/components/material.js");function i(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,n,r;return t=e,(n=[{key:"make",value:function(){var e=this;return function(){e.geo=new a.BufferGeometry}}},{key:"place",value:function(e,t){var n,r,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:15658734,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,c=new o.default(s,l).points,d=new a.Points(this.geo,c);return(n=d.position).set.apply(n,i(e)),(r=d.rotation).set.apply(r,i(t)),this.scene.add(d),d}},{key:"setAttribute",value:function(e,t){this.geo.setAttribute(e,t)}}])&&s(t.prototype,n),r&&s(t,r),e}()},"./src/js/app/components/renderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=n,this.threeRenderer=new a.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),n.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=a.PCFSoftShadowMap,o.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return i.updateSize()}),!1),window.addEventListener("resize",(function(){return i.updateSize()}),!1)}var t,n,r;return t=e,(n=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&i(t.prototype,n),r&&i(t,r),e}()},"./src/js/app/entities/galaxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var a=n("./node_modules/three/build/three.module.js"),o=n("./src/js/utils/galaxyHelpers.js"),i=n("./src/js/data/config.js");function r(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.particles=t,this.scene=this.particles.scene,this.entity=null}var t,n,s;return t=e,(n=[{key:"make",value:function(){this.particles.make()();var e=o.default.galaxyParticlePositions(i.default.particles.galaxy.size,i.default.particles.galaxy.thetaSpread,i.default.particles.galaxy.thetaPiMultiplier,i.default.particles.galaxy.phiSpread);this.particles.setAttribute("position",new a.Float32BufferAttribute(e,3)),this.entity=this.particles.place([0,0,0],[0,0,0],i.default.particles.galaxy.stars.color,i.default.particles.galaxy.stars.size),this.entity.visible=i.default.particles.galaxy.enabled,this.scene.add(this.entity)}},{key:"destroy",value:function(){this.scene.remove(this.entity)}},{key:"setVisible",value:function(e){this.entity.visible=e}}])&&r(t.prototype,n),s&&r(t,s),e}()},"./src/js/app/helpers/stats.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o,i,r,s;n.r(t),n.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,n,l;return t=e,l=[{key:"start",value:function(){o("frame").start(),r.start(),o("rAF").tick(),o("FPS").frame(),o("render").start()}},{key:"end",value:function(){o("render").end(),o("frame").end(),o("rStats").start(),o().update(),o("rStats").end()}}],(n=[{key:"setUp",value:function(){i=new BrowserStats,r=new glStats,s=new threeStats(this.renderer.threeRenderer),o=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[i,s]})}}])&&a(t.prototype,n),l&&a(t,l),e}()},"./src/js/app/main.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var a=n("./node_modules/three/build/three.module.js"),o=n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),i=n("./src/js/app/components/renderer.js"),r=n("./src/js/app/components/camera.js"),s=n("./src/js/app/components/light.js"),l=n("./src/js/app/components/controls.js"),c=n("./src/js/app/components/particles.js"),d=n("./src/js/app/entities/galaxy.js"),h=n("./src/js/app/helpers/stats.js"),u=n("./src/js/app/model/texture.js"),f=n("./src/js/app/managers/interaction.js"),g=n("./src/js/app/managers/datGUI.js"),m=n("./src/js/data/config.js");function p(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var b=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new a.Clock,this.scene=new a.Scene,this.scene.fog=new a.FogExp2(m.default.fog.color,m.default.fog.near),this.scene.background=new a.Color(m.default.background.color),window.devicePixelRatio&&(m.default.dpr=window.devicePixelRatio),this.renderer=new i.default(this.scene,t),this.camera=new r.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,t),this.light=new s.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return n.light.place(e)})),this.particles=new c.default(this.scene),this.particles.galaxy=new d.default(this.particles),this.particles.galaxy.make(),m.default.isDev&&m.default.isShowingStats&&(this.stats=new h.default(this.renderer),this.stats.setUp()),m.default.isDev&&(this.gui=new g.default(this)),this.texture=new u.default,this.texture.load().then((function(){n.manager=new a.LoadingManager,new f.default(n.renderer.threeRenderer,n.scene,n.camera.threeCamera,n.controls.threeControls),m.default.isDev&&n.gui.load(),m.default.isLoaded=!0,n.container.querySelector("#loading").style.display="none"})),this.render()}var t,n,b;return t=e,(n=[{key:"render",value:function(){m.default.isDev&&m.default.isShowingStats&&h.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),m.default.isDev&&m.default.isShowingStats&&h.default.end(),o.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}])&&p(t.prototype,n),b&&p(t,b),e}()},"./src/js/app/managers/datGUI.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.particles=t.particles}var t,n,i;return t=e,(n=[{key:"load",value:function(){var e=this;this.gui.addFolder("Scene").addColor(a.default.background,"color").name("Background Color").onChange((function(t){e.scene.background.setHex(t)}));var t=this.gui.addFolder("Camera"),n=t.add(a.default.camera,"fov",0,180).name("Camera FOV");n.onChange((function(t){e.controls.enableRotate=!1,e.camera.fov=t})),n.onFinishChange((function(){e.camera.updateProjectionMatrix(),e.controls.enableRotate=!0}));var o=t.add(a.default.camera,"aspect",0,4).name("Camera Aspect");o.onChange((function(t){e.controls.enableRotate=!1,e.camera.aspect=t})),o.onFinishChange((function(){e.camera.updateProjectionMatrix(),e.controls.enableRotate=!0})),t.addColor(a.default.fog,"color").name("Fog Color").onChange((function(t){e.scene.fog.color.setHex(t)}));var i=t.add(a.default.fog,"near",0,.01).name("Fog Near");i.onChange((function(t){e.controls.enableRotate=!1,e.scene.fog.density=t})),i.onFinishChange((function(){e.controls.enableRotate=!0}));var r=this.gui.addFolder("Controls");r.add(a.default.controls,"autoRotate").name("Auto Rotate").onChange((function(t){e.controls.autoRotate=t}));var s=r.add(a.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");s.onChange((function(t){e.controls.enableRotate=!1,e.controls.autoRotateSpeed=t})),s.onFinishChange((function(){e.controls.enableRotate=!0}));var l=this.gui.addFolder("Particles").addFolder("Galaxy");l.add(a.default.particles.galaxy,"enabled").name("Enabled").onChange((function(t){e.particles.galaxy.setVisible(t)})),l.add(a.default.particles.galaxy,"size").name("Size").onChange((function(){e.particles.galaxy.destroy(),e.particles.galaxy.make()})),l.add(a.default.particles.galaxy,"thetaSpread").name("Theta Spread").onChange((function(){e.particles.galaxy.destroy(),e.particles.galaxy.make()})),l.add(a.default.particles.galaxy,"thetaPiMultiplier").name("Theta PI Multiplier").onChange((function(){e.particles.galaxy.destroy(),e.particles.galaxy.make()})),l.add(a.default.particles.galaxy,"phiSpread").name("Phi Spread").onChange((function(){e.particles.galaxy.destroy(),e.particles.galaxy.make()}));var c=this.gui.addFolder("Ambient Light");c.add(a.default.ambientLight,"enabled").name("Enabled").onChange((function(t){e.light.ambientLight.visible=t})),c.addColor(a.default.ambientLight,"color").name("Color").onChange((function(t){e.light.ambientLight.color.setHex(t)}));var d=this.gui.addFolder("Directional Light");d.add(a.default.directionalLight,"enabled").name("Enabled").onChange((function(t){e.light.directionalLight.visible=t})),d.addColor(a.default.directionalLight,"color").name("Color").onChange((function(t){e.light.directionalLight.color.setHex(t)}));var h=d.add(a.default.directionalLight,"intensity",0,2).name("Intensity");h.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.intensity=t})),h.onFinishChange((function(){e.controls.enableRotate=!0}));var u=d.add(a.default.directionalLight,"x",-1e3,1e3).name("Position X");u.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.position.x=t})),u.onFinishChange((function(){e.controls.enableRotate=!0}));var f=d.add(a.default.directionalLight,"y",-1e3,1e3).name("Position Y");f.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.position.y=t})),f.onFinishChange((function(){e.controls.enableRotate=!0}));var g=d.add(a.default.directionalLight,"z",-1e3,1e3).name("Position Z");g.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.position.z=t})),g.onFinishChange((function(){e.controls.enableRotate=!0}));var m=this.gui.addFolder("Shadow Map");m.add(a.default.shadow,"enabled").name("Enabled").onChange((function(t){e.light.directionalLight.castShadow=t})),m.add(a.default.shadow,"helperEnabled").name("Helper Enabled").onChange((function(t){e.light.directionalLightHelper.visible=t}));var p=m.add(a.default.shadow,"near",0,400).name("Near");p.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.near=t})),p.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var b=m.add(a.default.shadow,"far",0,1200).name("Far");b.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.far=t})),b.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var v=m.add(a.default.shadow,"top",-400,400).name("Top");v.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.top=t})),v.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var y=m.add(a.default.shadow,"right",-400,400).name("Right");y.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.right=t})),y.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var w=m.add(a.default.shadow,"bottom",-400,400).name("Bottom");w.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.bottom=t})),w.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var L=m.add(a.default.shadow,"left",-400,400).name("Left");L.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.camera.left=t})),L.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var C=m.add(a.default.shadow,"bias",-1e-5,1).name("Bias");C.onChange((function(t){e.controls.enableRotate=!1,e.light.directionalLight.shadow.bias=t})),C.onFinishChange((function(){e.controls.enableRotate=!0,e.light.directionalLight.shadow.map.dispose(),e.light.directionalLight.shadow.map=null,e.light.directionalLightHelper.update()}));var j=this.gui.addFolder("Point Light");j.add(a.default.pointLight,"enabled").name("Enabled").onChange((function(t){e.light.pointLight.visible=t})),j.addColor(a.default.pointLight,"color").name("Color").onChange((function(t){e.light.pointLight.color.setHex(t)}));var E=j.add(a.default.pointLight,"intensity",0,2).name("Intensity");E.onChange((function(t){e.controls.enableRotate=!1,e.light.pointLight.intensity=t})),E.onFinishChange((function(){e.controls.enableRotate=!0}));var x=j.add(a.default.pointLight,"distance",0,1e3).name("Distance");x.onChange((function(t){e.controls.enableRotate=!1,e.light.pointLight.distance=t})),x.onFinishChange((function(){e.controls.enableRotate=!0}));var k=j.add(a.default.pointLight,"x",-1e3,1e3).name("Position X");k.onChange((function(t){e.controls.enableRotate=!1,e.light.pointLight.position.x=t})),k.onFinishChange((function(){e.controls.enableRotate=!0}));var R=j.add(a.default.pointLight,"y",-1e3,1e3).name("Position Y");R.onChange((function(t){e.controls.enableRotate=!1,e.light.pointLight.position.y=t})),R.onFinishChange((function(){e.controls.enableRotate=!0}));var M=j.add(a.default.pointLight,"z",-1e3,1e3).name("Position Z");M.onChange((function(t){e.controls.enableRotate=!1,e.light.pointLight.position.z=t})),M.onFinishChange((function(){e.controls.enableRotate=!0}));var P=this.gui.addFolder("Hemi Light");P.add(a.default.hemiLight,"enabled").name("Enabled").onChange((function(t){e.light.hemiLight.visible=t})),P.addColor(a.default.hemiLight,"color").name("Color").onChange((function(t){e.light.hemiLight.color.setHex(t)})),P.addColor(a.default.hemiLight,"groundColor").name("ground Color").onChange((function(t){e.light.hemiLight.groundColor.setHex(t)}));var S=P.add(a.default.hemiLight,"intensity",0,2).name("Intensity");S.onChange((function(t){e.controls.enableRotate=!1,e.light.hemiLight.intensity=t})),S.onFinishChange((function(){e.controls.enableRotate=!0}));var A=P.add(a.default.hemiLight,"x",-1e3,1e3).name("Position X");A.onChange((function(t){e.controls.enableRotate=!1,e.light.hemiLight.position.x=t})),A.onFinishChange((function(){e.controls.enableRotate=!0}));var F=P.add(a.default.hemiLight,"y",-500,1e3).name("Position Y");F.onChange((function(t){e.controls.enableRotate=!1,e.light.hemiLight.position.y=t})),F.onFinishChange((function(){e.controls.enableRotate=!0}));var O=P.add(a.default.hemiLight,"z",-1e3,1e3).name("Position Z");O.onChange((function(t){e.controls.enableRotate=!1,e.light.hemiLight.position.z=t})),O.onFinishChange((function(){e.controls.enableRotate=!0}))}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/app/managers/interaction.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var a=n("./src/js/utils/keyboard.js"),o=n("./src/js/utils/helpers.js"),i=n("./src/js/data/config.js");function r(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t,n,i,r){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=n,this.camera=i,this.controls=r,this.timeout=null,this.keyboard=new a.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return o.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,n,s;return t=e,(n=[{key:"onMouseOver",value:function(e){e.preventDefault(),i.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),i.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){i.default.isMouseMoving=!1}),200),i.default.isMouseMoving=!0}}])&&r(t.prototype,n),s&&r(t,s),e}()},"./src/js/app/model/texture.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),o=n("./node_modules/es6-promise/dist/es6-promise.js"),i=n("./src/js/utils/helpers.js"),r=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,n,l;return t=e,(n=[{key:"load",value:function(){var e=this,t=new a.TextureLoader,n=r.default.maxAnisotropy,s=r.default.texture.imageFiles,l=[];return t.setPath(r.default.texture.path),s.forEach((function(e){l.push(new o.Promise((function(o,r){t.load(e.image,(function(t){t.anisotropy=n;var i={};i[e.name]=t,i[e.name]instanceof a.Texture&&o(i)}),i.default.logProgress(),(function(t){return r(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),o.Promise.all(l).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]]}),(function(e){return console.log(e)}))}}])&&s(t.prototype,n),l&&s(t,l),e}()},"./src/js/data/config.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,background:{color:0},model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},particles:{galaxy:{enabled:!0,size:1e3,thetaSpread:2.2,thetaPiMultiplier:2,phiSpread:.5,stars:{color:15658734,size:1}}},fog:{color:16777215,near:8e-4},camera:{fov:100,near:100,far:5e3,aspect:1,posX:0,posY:0,posZ:2e3},controls:{autoRotate:!0,autoRotateSpeed:-.05,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:4e3,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/1.5,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!1,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,n=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=n,t.appendChild(a)}}},"./src/js/utils/galaxyHelpers.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,i=[{key:"normalRandom",value:function(e,t){for(var n=0,a=1;a<=12;a++)n+=Math.random();return(n-6)*t+e}},{key:"galaxyParticlePositions",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2.2,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,i=0,r=[],s=0;s<e;s++){i=this.normalRandom(.5,.5);var l=a.Math.randFloatSpread(t),c=i*Math.PI*n+l,d=a.Math.randFloatSpread(o),h=i*e;r.push(-h*Math.cos(c)*Math.cos(d)),r.push(-h*Math.sin(c)*Math.sin(d)),r.push(h*Math.sin(c)),r.push(h*Math.cos(c)*Math.cos(d)),r.push(h*Math.sin(c)*Math.sin(d)),r.push(-h*Math.sin(c))}return r}}],(n=null)&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/utils/helpers.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>o});var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,o=[{key:"throttle",value:function(e,t,n){var a,o;return t||(t=250),function(){var i=n||this,r=+new Date,s=arguments;a&&r<a+t?(clearTimeout(o),o=setTimeout((function(){a=r,e.apply(i,s)}),t)):(a=r,e.apply(i,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,n){return function(a){e[t]=n[a],e.needsUpdate=!0}}}],(n=null)&&a(t.prototype,n),o&&a(t,o),e}()},"./src/js/utils/keyboard.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>i});var o={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},i=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return n.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return n.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return n.onBlur}),!1)}var t,n,i;return t=e,(n=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),n=0;n<t.length;n++){var a=t[n],i=!1;if(i=-1!=Object.keys(o).indexOf(a)?this.keyCodes[o[a]]:this.keyCodes[a.toUpperCase().charCodeAt(0)],!i)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var n=o,a=Object.keys(n),i=t.split("+"),r=0;r<i.length;r++){var s=i[r],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==a.indexOf(s)?l=e.keyCode===n[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&a(t.prototype,n),i&&a(t,i),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function n(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var n,a,o,i,r,s,l,c,d=this,h=1e-6,u=0,f=0,g=1,m=new e.Vector3,p=!1;this.getPolarAngle=function(){return a},this.getAzimuthalAngle=function(){return n},this.rotateLeft=function(e){f-=e},this.rotateUp=function(e){u-=e},this.panLeft=(o=new e.Vector3,function(e){var t=this.object.matrix.elements;o.set(t[0],t[1],t[2]),o.multiplyScalar(-e),m.add(o)}),this.panUp=function(){var t=new e.Vector3;return function(e){var n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),m.add(t)}}(),this.pan=function(t,n,a,o){if(d.object instanceof e.PerspectiveCamera){var i=d.object.position.clone().sub(d.target).length();i*=Math.tan(d.object.fov/2*Math.PI/180),d.panLeft(2*t*i/o),d.panUp(2*n*i/o)}else d.object instanceof e.OrthographicCamera?(d.panLeft(t*(d.object.right-d.object.left)/a),d.panUp(n*(d.object.top-d.object.bottom)/o)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){d.object instanceof e.PerspectiveCamera?g/=t:d.object instanceof e.OrthographicCamera?(d.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),d.object.updateProjectionMatrix(),p=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){d.object instanceof e.PerspectiveCamera?g*=t:d.object instanceof e.OrthographicCamera?(d.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),d.object.updateProjectionMatrix(),p=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(i=new e.Vector3,r=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),s=r.clone().inverse(),l=new e.Vector3,c=new e.Quaternion,function(){var e=this.object.position;i.copy(e).sub(this.target),i.applyQuaternion(r),n=Math.atan2(i.x,i.z),a=Math.atan2(Math.sqrt(i.x*i.x+i.z*i.z),i.y),n+=f,a+=u,n=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,n)),a=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,a)),a=Math.max(h,Math.min(Math.PI-h,a));var t=i.length()*g;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(m),i.x=t*Math.sin(a)*Math.sin(n),i.y=t*Math.cos(a),i.z=t*Math.sin(a)*Math.cos(n),i.applyQuaternion(s),e.copy(this.target).add(i),this.object.lookAt(this.target),!0===this.enableDamping?(f*=1-this.dampingFactor,u*=1-this.dampingFactor):(f=0,u=0),g=1,m.set(0,0,0),!!(p||l.distanceToSquared(this.object.position)>h||8*(1-c.dot(this.object.quaternion))>h)&&(l.copy(this.object.position),c.copy(this.object.quaternion),p=!1,!0)})}function a(t,a){var o=new n(t);this.domElement=void 0!==a?a:document,Object.defineProperty(this,"constraint",{get:function(){return o}}),this.getPolarAngle=function(){return o.getPolarAngle()},this.getAzimuthalAngle=function(){return o.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var i=this,r=new e.Vector2,s=new e.Vector2,l=new e.Vector2,c=new e.Vector2,d=new e.Vector2,h=new e.Vector2,u=new e.Vector2,f=new e.Vector2,g=new e.Vector2,m=-1,p=0,b=1,v=2,y=3,w=4,L=5,C=m;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var j={type:"change"},E={type:"start"},x={type:"end"};function k(e,t){var n=i.domElement===document?i.domElement.body:i.domElement;o.pan(e,t,n.clientWidth,n.clientHeight)}function R(){return Math.pow(.95,i.zoomSpeed)}function M(e){if(!1!==i.enabled){if(e.preventDefault(),e.button===i.mouseButtons.ORBIT){if(!1===i.enableRotate)return;C=p,r.set(e.clientX,e.clientY)}else if(e.button===i.mouseButtons.ZOOM){if(!1===i.enableZoom)return;C=b,u.set(e.clientX,e.clientY)}else if(e.button===i.mouseButtons.PAN){if(!1===i.enablePan)return;C=v,c.set(e.clientX,e.clientY)}C!==m&&(document.addEventListener("mousemove",P,!1),document.addEventListener("mouseup",S,!1),i.dispatchEvent(E))}}function P(e){if(!1!==i.enabled){e.preventDefault();var t=i.domElement===document?i.domElement.body:i.domElement;if(C===p){if(!1===i.enableRotate)return;s.set(e.clientX,e.clientY),l.subVectors(s,r),o.rotateLeft(2*Math.PI*l.x/t.clientWidth*i.rotateSpeed),o.rotateUp(2*Math.PI*l.y/t.clientHeight*i.rotateSpeed),r.copy(s)}else if(C===b){if(!1===i.enableZoom)return;f.set(e.clientX,e.clientY),g.subVectors(f,u),g.y>0?o.dollyIn(R()):g.y<0&&o.dollyOut(R()),u.copy(f)}else if(C===v){if(!1===i.enablePan)return;d.set(e.clientX,e.clientY),h.subVectors(d,c),k(h.x,h.y),c.copy(d)}C!==m&&i.update()}}function S(){!1!==i.enabled&&(document.removeEventListener("mousemove",P,!1),document.removeEventListener("mouseup",S,!1),i.dispatchEvent(x),C=m)}function A(e){if(!1!==i.enabled&&!1!==i.enableZoom&&C===m){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?o.dollyOut(R()):t<0&&o.dollyIn(R()),i.update(),i.dispatchEvent(E),i.dispatchEvent(x)}}function F(e){if(!1!==i.enabled&&!1!==i.enableKeys&&!1!==i.enablePan)switch(e.keyCode){case i.keys.UP:k(0,i.keyPanSpeed),i.update();break;case i.keys.BOTTOM:k(0,-i.keyPanSpeed),i.update();break;case i.keys.LEFT:k(i.keyPanSpeed,0),i.update();break;case i.keys.RIGHT:k(-i.keyPanSpeed,0),i.update()}}function O(e){if(!1!==i.enabled){switch(e.touches.length){case 1:if(!1===i.enableRotate)return;C=y,r.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===i.enableZoom)return;C=w;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+n*n);u.set(0,a);break;case 3:if(!1===i.enablePan)return;C=L,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:C=m}C!==m&&i.dispatchEvent(E)}}function z(e){if(!1!==i.enabled){e.preventDefault(),e.stopPropagation();var t=i.domElement===document?i.domElement.body:i.domElement;switch(e.touches.length){case 1:if(!1===i.enableRotate)return;if(C!==y)return;s.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(s,r),o.rotateLeft(2*Math.PI*l.x/t.clientWidth*i.rotateSpeed),o.rotateUp(2*Math.PI*l.y/t.clientHeight*i.rotateSpeed),r.copy(s),i.update();break;case 2:if(!1===i.enableZoom)return;if(C!==w)return;var n=e.touches[0].pageX-e.touches[1].pageX,a=e.touches[0].pageY-e.touches[1].pageY,p=Math.sqrt(n*n+a*a);f.set(0,p),g.subVectors(f,u),g.y>0?o.dollyOut(R()):g.y<0&&o.dollyIn(R()),u.copy(f),i.update();break;case 3:if(!1===i.enablePan)return;if(C!==L)return;d.set(e.touches[0].pageX,e.touches[0].pageY),h.subVectors(d,c),k(h.x,h.y),c.copy(d),i.update();break;default:C=m}}}function D(){!1!==i.enabled&&(i.dispatchEvent(x),C=m)}function T(e){e.preventDefault()}this.update=function(){this.autoRotate&&C===m&&o.rotateLeft(2*Math.PI/60/60*i.autoRotateSpeed),!0===o.update()&&this.dispatchEvent(j)},this.reset=function(){C=m,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(j),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",T,!1),this.domElement.removeEventListener("mousedown",M,!1),this.domElement.removeEventListener("mousewheel",A,!1),this.domElement.removeEventListener("MozMousePixelScroll",A,!1),this.domElement.removeEventListener("touchstart",O,!1),this.domElement.removeEventListener("touchend",D,!1),this.domElement.removeEventListener("touchmove",z,!1),document.removeEventListener("mousemove",P,!1),document.removeEventListener("mouseup",S,!1),window.removeEventListener("keydown",F,!1)},this.domElement.addEventListener("contextmenu",T,!1),this.domElement.addEventListener("mousedown",M,!1),this.domElement.addEventListener("mousewheel",A,!1),this.domElement.addEventListener("MozMousePixelScroll",A,!1),this.domElement.addEventListener("touchstart",O,!1),this.domElement.addEventListener("touchend",D,!1),this.domElement.addEventListener("touchmove",z,!1),window.addEventListener("keydown",F,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),a.prototype=Object.create(e.EventDispatcher.prototype),a.prototype.constructor=a,Object.defineProperties(a.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),a}},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2NhbWVyYS5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2NvbnRyb2xzLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL2NvbXBvbmVudHMvbGlnaHQuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9tYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL3BhcnRpY2xlcy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL3JlbmRlcmVyLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL2VudGl0aWVzL2dhbGF4eS5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL2FwcC9oZWxwZXJzL3N0YXRzLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL21haW4uanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9hcHAvbWFuYWdlcnMvZGF0R1VJLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL21hbmFnZXJzL2ludGVyYWN0aW9uLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvYXBwL21vZGVsL3RleHR1cmUuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy9kYXRhL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL3V0aWxzL2RldGVjdG9yLmpzIiwid2VicGFjazovL3RocmVlanMtZXM2LXdlYnBhY2stYm9pbGVycGxhdGUvLi9zcmMvanMvdXRpbHMvZ2FsYXh5SGVscGVycy5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1lczYtd2VicGFjay1ib2lsZXJwbGF0ZS8uL3NyYy9qcy91dGlscy9rZXlib2FyZC5qcyIsIndlYnBhY2s6Ly90aHJlZWpzLWVzNi13ZWJwYWNrLWJvaWxlcnBsYXRlLy4vc3JjL2pzL3V0aWxzL29yYml0Q29udHJvbHMuanMiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsIkNvbmZpZyIsIkRldGVjdG9yIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIk1haW4iLCJpbml0IiwiQ2FtZXJhIiwicmVuZGVyZXIiLCJ3aWR0aCIsImRvbUVsZW1lbnQiLCJoZWlnaHQiLCJ0aGlzIiwidGhyZWVDYW1lcmEiLCJUSFJFRSIsInBvc2l0aW9uIiwic2V0IiwidXBkYXRlU2l6ZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiQ29udHJvbHMiLCJjYW1lcmEiLCJvcmJpdENvbnRyb2xzIiwiT3JiaXRDb250cm9scyIsInRocmVlQ29udHJvbHMiLCJ0YXJnZXQiLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwicm90YXRlU3BlZWQiLCJ6b29tU3BlZWQiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJlbmFibGVEYW1waW5nIiwiZW5hYmxlWm9vbSIsImRhbXBpbmdGYWN0b3IiLCJMaWdodCIsInNjZW5lIiwiYW1iaWVudExpZ2h0IiwidmlzaWJsZSIsInBvaW50TGlnaHQiLCJkaXJlY3Rpb25hbExpZ2h0IiwiY2FzdFNoYWRvdyIsInNoYWRvdyIsImJpYXMiLCJuZWFyIiwiZmFyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibWFwU2l6ZSIsImRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJoZW1pTGlnaHQiLCJsaWdodE5hbWUiLCJhZGQiLCJNYXRlcmlhbCIsImNvbG9yIiwic2l6ZSIsImJhc2ljIiwic2lkZSIsInN0YW5kYXJkIiwic2hhZGluZyIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsIndpcmUiLCJ3aXJlZnJhbWUiLCJwb2ludHMiLCJQYXJ0aWNsZXMiLCJnZW8iLCJyb3RhdGlvbiIsImNvbG9ySGV4IiwicGFydGljbGVTaXplIiwibWF0ZXJpYWwiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlQnVmZmVyRmxvYXQzMiIsInNldEF0dHJpYnV0ZSIsIlJlbmRlcmVyIiwidGhyZWVSZW5kZXJlciIsImFudGlhbGlhcyIsInNldENsZWFyQ29sb3IiLCJmb2ciLCJzZXRQaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImFwcGVuZENoaWxkIiwic2hhZG93TWFwIiwiZW5hYmxlZCIsInR5cGUiLCJjYXBhYmlsaXRpZXMiLCJnZXRNYXhBbmlzb3Ryb3B5Iiwic2V0U2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicmVuZGVyIiwiR2FsYXh5IiwicGFydGljbGVzIiwiZW50aXR5IiwibWFrZSIsImdhbGF4eVBhcnRpY2xlUG9zaXRpb25zIiwiR2FsYXh5SGVscGVycyIsInBsYWNlIiwicmVtb3ZlIiwidmFsdWUiLCJyUyIsImJTIiwiZ2xTIiwidFMiLCJTdGF0cyIsInN0YXJ0IiwidGljayIsImZyYW1lIiwiZW5kIiwidXBkYXRlIiwiQnJvd3NlclN0YXRzIiwiZ2xTdGF0cyIsInRocmVlU3RhdHMiLCJyU3RhdHMiLCJDU1NQYXRoIiwidXNlclRpbWluZ0FQSSIsInZhbHVlcyIsImNhcHRpb24iLCJvdmVyIiwiYXZlcmFnZSIsImF2Z01zIiwiZnBzIiwiYmVsb3ciLCJjYWxscyIsInJhZiIsInJzdGF0cyIsInRleHR1cmUiLCJncm91cHMiLCJmcmFjdGlvbnMiLCJiYXNlIiwic3RlcHMiLCJwbHVnaW5zIiwiY2xvY2siLCJiYWNrZ3JvdW5kIiwiY29udHJvbHMiLCJsaWdodCIsImZvckVhY2giLCJnYWxheHkiLCJzdGF0cyIsInNldFVwIiwiZ3VpIiwiRGF0R1VJIiwiVGV4dHVyZSIsImxvYWQiLCJ0aGVuIiwibWFuYWdlciIsIkludGVyYWN0aW9uIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsIlRXRUVOIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYmluZCIsIm1haW4iLCJkYXQiLCJHVUkiLCJhZGRGb2xkZXIiLCJhZGRDb2xvciIsIm5hbWUiLCJvbkNoYW5nZSIsInNldEhleCIsImNhbWVyYUZvbGRlciIsImNhbWVyYUZPVkd1aSIsImVuYWJsZVJvdGF0ZSIsImZvdiIsIm9uRmluaXNoQ2hhbmdlIiwiY2FtZXJhQXNwZWN0R3VpIiwiY2FtZXJhRm9nTmVhckd1aSIsImRlbnNpdHkiLCJjb250cm9sc0ZvbGRlciIsImNvbnRyb2xzQXV0b1JvdGF0ZVNwZWVkR3VpIiwiZ2FsYXh5Rm9sZGVyIiwic2V0VmlzaWJsZSIsImRlc3Ryb3kiLCJhbWJpZW50TGlnaHRGb2xkZXIiLCJkaXJlY3Rpb25hbExpZ2h0Rm9sZGVyIiwiZGlyZWN0aW9uYWxMaWdodEludGVuc2l0eUd1aSIsImludGVuc2l0eSIsImRpcmVjdGlvbmFsTGlnaHRQb3NpdGlvblhHdWkiLCJ4IiwiZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWUd1aSIsInkiLCJkaXJlY3Rpb25hbExpZ2h0UG9zaXRpb25aR3VpIiwieiIsInNoYWRvd0ZvbGRlciIsInNoYWRvd05lYXJHdWkiLCJtYXAiLCJkaXNwb3NlIiwic2hhZG93RmFyR3VpIiwic2hhZG93VG9wR3VpIiwic2hhZG93UmlnaHRHdWkiLCJzaGFkb3dCb3R0b21HdWkiLCJzaGFkb3dMZWZ0R3VpIiwic2hhZG93Qmlhc0d1aSIsInBvaW50TGlnaHRGb2xkZXIiLCJwb2ludExpZ2h0SW50ZW5zaXR5R3VpIiwicG9pbnRMaWdodERpc3RhbmNlR3VpIiwiZGlzdGFuY2UiLCJwb2ludExpZ2h0UG9zaXRpb25YR3VpIiwicG9pbnRMaWdodFBvc2l0aW9uWUd1aSIsInBvaW50TGlnaHRQb3NpdGlvblpHdWkiLCJoZW1pTGlnaHRGb2xkZXIiLCJncm91bmRDb2xvciIsImhlbWlMaWdodEludGVuc2l0eUd1aSIsImhlbWlMaWdodFBvc2l0aW9uWEd1aSIsImhlbWlMaWdodFBvc2l0aW9uWUd1aSIsImhlbWlMaWdodFBvc2l0aW9uWkd1aSIsInRpbWVvdXQiLCJrZXlib2FyZCIsIktleWJvYXJkIiwiZXZlbnQiLCJIZWxwZXJzIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlT3ZlciIsInJlcGVhdCIsImV2ZW50TWF0Y2hlcyIsInByZXZlbnREZWZhdWx0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInRleHR1cmVzIiwibG9hZGVyIiwibWF4QW5pc290cm9weSIsImltYWdlRmlsZXMiLCJwcm9taXNlQXJyYXkiLCJzZXRQYXRoIiwiaW1hZ2VGaWxlIiwicHVzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2UiLCJhbmlzb3Ryb3B5IiwibW9kZWxPQkoiLCJ4aHIiLCJFcnJvciIsImkiLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwicmVhc29uIiwiaXNEZXYiLCJpc1Nob3dpbmdTdGF0cyIsImlzTG9hZGVkIiwiaXNUd2VlbmluZyIsImlzUm90YXRpbmciLCJpc01vdXNlTW92aW5nIiwiaXNNb3VzZU92ZXIiLCJkcHIiLCJlYXNpbmciLCJkdXJhdGlvbiIsIm1vZGVsIiwic2VsZWN0ZWQiLCJpbml0aWFsVHlwZXMiLCJtb2RlbHMiLCJwYXRoIiwic2NhbGUiLCJtZXNoIiwiZW5hYmxlSGVscGVyIiwidHJhbnNsdWNlbnQiLCJlbWlzc2l2ZSIsInRoZXRhU3ByZWFkIiwidGhldGFQaU11bHRpcGxpZXIiLCJwaGlTcHJlYWQiLCJzdGFycyIsInBvc1giLCJwb3NZIiwicG9zWiIsIk1hdGgiLCJQSSIsIm1pbkF6aW11dGhBbmdsZSIsIkluZmluaXR5IiwibWF4QXppbXV0aEFuZ2xlIiwiaGVscGVyRW5hYmxlZCIsIm1hcFdpZHRoIiwibWFwSGVpZ2h0IiwiY2FudmFzIiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwid2ViZ2wiLCJjcmVhdGVFbGVtZW50IiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiZ2V0Q29udGV4dCIsImUiLCJ3b3JrZXJzIiwiV29ya2VyIiwiZmlsZWFwaSIsIkZpbGUiLCJGaWxlUmVhZGVyIiwiRmlsZUxpc3QiLCJCbG9iIiwiZ2V0V2ViR0xFcnJvck1lc3NhZ2UiLCJlbGVtZW50IiwiaWQiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwidGV4dEFsaWduIiwicGFkZGluZyIsIm1hcmdpbiIsImlubmVySFRNTCIsImpvaW4iLCJhZGRHZXRXZWJHTE1lc3NhZ2UiLCJwYXJhbWV0ZXJzIiwicGFyZW50IiwidW5kZWZpbmVkIiwiYm9keSIsIm1lYW4iLCJzdGQiLCJuIiwicmFuZG9tIiwiZ2FsYXh5U2l6ZSIsIm5vcm0iLCJwb3NpdGlvbnMiLCJub3JtYWxSYW5kb20iLCJ0aGV0YVZhcmlhdGlvbiIsInRoZXRhIiwicGhpIiwiY29zIiwic2luIiwiZm4iLCJ0aHJlc2hob2xkIiwic2NvcGUiLCJsYXN0IiwiZGVmZXJUaW1lciIsImNvbnRleHQiLCJub3ciLCJEYXRlIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwibGVuZ3RoQ29tcHV0YWJsZSIsInBlcmNlbnRDb21wbGV0ZSIsImxvYWRlZCIsInRvdGFsIiwicm91bmQiLCJlcnJvciIsInJlcGxhY2UiLCJuZWVkc1VwZGF0ZSIsImdlb21ldHJ5IiwidmVydGV4Q29sb3JzIiwidmVydGljZXNOZWVkVXBkYXRlIiwibm9ybWFsc05lZWRVcGRhdGUiLCJjb2xvcnNOZWVkVXBkYXRlIiwibWF0ZXJpYWxLZXkiLCJrZXkiLCJBTElBUyIsImtleUNvZGVzIiwib25LZXlDaGFuZ2UiLCJvbkJsdXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJvcCIsImtleUNvZGUiLCJrZXlEZXNjIiwic3BsaXQiLCJwcmVzc2VkIiwiaW5kZXhPZiIsInRvVXBwZXJDYXNlIiwiY2hhckNvZGVBdCIsImFsaWFzZXMiLCJhbGlhc0tleXMiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwibW9kdWxlIiwiZXhwb3J0cyIsIk1PVVNFIiwiT3JiaXRDb25zdHJhaW50Iiwib2JqZWN0IiwiVmVjdG9yMyIsIm1pblpvb20iLCJtYXhab29tIiwidiIsIm9mZnNldCIsInF1YXQiLCJxdWF0SW52ZXJzZSIsImxhc3RQb3NpdGlvbiIsImxhc3RRdWF0ZXJuaW9uIiwiRVBTIiwicGhpRGVsdGEiLCJ0aGV0YURlbHRhIiwicGFuT2Zmc2V0Iiwiem9vbUNoYW5nZWQiLCJnZXRQb2xhckFuZ2xlIiwiZ2V0QXppbXV0aGFsQW5nbGUiLCJyb3RhdGVMZWZ0IiwiYW5nbGUiLCJyb3RhdGVVcCIsInBhbkxlZnQiLCJ0ZSIsIm1hdHJpeCIsImVsZW1lbnRzIiwibXVsdGlwbHlTY2FsYXIiLCJwYW5VcCIsInBhbiIsImRlbHRhWCIsImRlbHRhWSIsInNjcmVlbldpZHRoIiwic2NyZWVuSGVpZ2h0IiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ0YXJnZXREaXN0YW5jZSIsImNsb25lIiwic3ViIiwidGFuIiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwid2FybiIsImRvbGx5SW4iLCJkb2xseVNjYWxlIiwiem9vbSIsIm1heCIsIm1pbiIsImRvbGx5T3V0IiwiUXVhdGVybmlvbiIsInNldEZyb21Vbml0VmVjdG9ycyIsInVwIiwiaW52ZXJzZSIsImNvcHkiLCJhcHBseVF1YXRlcm5pb24iLCJhdGFuMiIsInNxcnQiLCJyYWRpdXMiLCJsb29rQXQiLCJkaXN0YW5jZVRvU3F1YXJlZCIsImRvdCIsInF1YXRlcm5pb24iLCJjb25zdHJhaW50IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJjZW50ZXIiLCJlbmFibGVQYW4iLCJrZXlQYW5TcGVlZCIsImVuYWJsZUtleXMiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkJPVFRPTSIsIm1vdXNlQnV0dG9ucyIsIk9SQklUIiwiWk9PTSIsIk1JRERMRSIsIlBBTiIsInJvdGF0ZVN0YXJ0IiwiVmVjdG9yMiIsInJvdGF0ZUVuZCIsInJvdGF0ZURlbHRhIiwicGFuU3RhcnQiLCJwYW5FbmQiLCJwYW5EZWx0YSIsImRvbGx5U3RhcnQiLCJkb2xseUVuZCIsImRvbGx5RGVsdGEiLCJTVEFURSIsInN0YXRlIiwidGFyZ2V0MCIsInBvc2l0aW9uMCIsInpvb20wIiwiY2hhbmdlRXZlbnQiLCJzdGFydEV2ZW50IiwiZW5kRXZlbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldFpvb21TY2FsZSIsInBvdyIsIm9uTW91c2VEb3duIiwiYnV0dG9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJvbk1vdXNlVXAiLCJkaXNwYXRjaEV2ZW50Iiwic3ViVmVjdG9ycyIsIm9uTW91c2VXaGVlbCIsInN0b3BQcm9wYWdhdGlvbiIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRldGFpbCIsIm9uS2V5RG93biIsInRvdWNoc3RhcnQiLCJ0b3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImR4IiwiZHkiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsImNvbnRleHRtZW51IiwicmVzZXQiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJFdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsImRlZmluZVByb3BlcnRpZXMiLCJub1pvb20iLCJub1JvdGF0ZSIsIm5vUGFuIiwibm9LZXlzIiwic3RhdGljTW92aW5nIiwiZHluYW1pY0RhbXBpbmdGYWN0b3IiXSwibWFwcGluZ3MiOiI7aVNBU0VBLFFBQVFDLElBQUksMkNBRVpDLGlCQUFlLEVBR2pCLFdBRUUsR0FBSUMsZ0JBRUcsQ0FDTCxJQUFNQyxFQUFZQyxTQUFTQyxlQUFlLGdCQUMxQyxJQUFJQyxVQUFLSCxRQUhURCwrQkFPSkssSSx3VkNuQnFCQyxFLFdBQ25CLFdBQVlDLEdBQVUsWSw0RkFBQSxTQUNwQixJQUFNQyxFQUFRRCxFQUFTRSxXQUFXRCxNQUM1QkUsRUFBU0gsRUFBU0UsV0FBV0MsT0FHbkNDLEtBQUtDLFlBQWMsSUFBSUMsb0JBQXdCZCxxQkFBbUJTLEVBQVFFLEVBQVFYLHNCQUFvQkEsc0JBQ3RHWSxLQUFLQyxZQUFZRSxTQUFTQyxJQUFJaEIsc0JBQW9CQSxzQkFBb0JBLHVCQUd0RVksS0FBS0ssV0FBV1QsR0FHaEJVLE9BQU9DLGlCQUFpQixVQUFVLGtCQUFNLEVBQUtGLFdBQVdULE1BQVcsRyxpREFHckUsU0FBV0EsR0FFVEksS0FBS0MsWUFBWU8sT0FBU1osRUFBU0UsV0FBV0QsTUFBUUQsRUFBU0UsV0FBV0MsT0FHMUVDLEtBQUtDLFlBQVlRLDhCLDJhQ3BCQUMsRSxXQUNuQixXQUFZQyxFQUFRckIsSSw0RkFBVyxTQUU3QixJQUFNc0IsRUFBZ0IsSUFBSUMsSUFBSixDQUFrQlgsR0FDeENGLEtBQUtjLGNBQWdCLElBQUlGLEVBQWNELEVBQVFyQixHQUUvQ1UsS0FBS04sTywyQ0FHUCxXQUNFTSxLQUFLYyxjQUFjQyxPQUFPWCxJQUFJaEIsNEJBQTBCQSw0QkFBMEJBLDZCQUNsRlksS0FBS2MsY0FBY0UsV0FBYTVCLDhCQUNoQ1ksS0FBS2MsY0FBY0csZ0JBQWtCN0IsbUNBQ3JDWSxLQUFLYyxjQUFjSSxZQUFjOUIsK0JBQ2pDWSxLQUFLYyxjQUFjSyxVQUFZL0IsNkJBQy9C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LDRGQUVLL1ksS0FBS21hLFdBQVd6WSxlQUd6QnRCLElBQUssU0FBVXlGLEdBQ2IzRyxRQUFRNlosS0FDTiw0RkFFRi9ZLEtBQUttYSxXQUFXelksY0FBZ0JtRSxNQUsvQmhGLEkiLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uZmlnIGZyb20gJy4vZGF0YS9jb25maWcnO1xuaW1wb3J0IERldGVjdG9yIGZyb20gJy4vdXRpbHMvZGV0ZWN0b3InO1xuaW1wb3J0IE1haW4gZnJvbSAnLi9hcHAvbWFpbic7XG5cbi8vIFN0eWxlc1xuaW1wb3J0ICcuLy4uL2Nzcy9hcHAuc2Nzcyc7XG5cbi8vIENoZWNrIGVudmlyb25tZW50IGFuZCBzZXQgdGhlIENvbmZpZyBoZWxwZXJcbmlmKF9fRU5WX18gPT09ICdkZXYnKSB7XG4gIGNvbnNvbGUubG9nKCctLS0tLSBSVU5OSU5HIElOIERFViBFTlZJUk9OTUVOVCEgLS0tLS0nKTtcblxuICBDb25maWcuaXNEZXYgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICAvLyBDaGVjayBmb3Igd2ViR0wgY2FwYWJpbGl0aWVzXG4gIGlmKCFEZXRlY3Rvci53ZWJnbCkge1xuICAgIERldGVjdG9yLmFkZEdldFdlYkdMTWVzc2FnZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBDb250YWluZXInKTtcbiAgICBuZXcgTWFpbihjb250YWluZXIpO1xuICB9XG59XG5cbmluaXQoKTtcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIENsYXNzIHRoYXQgY3JlYXRlcyBhbmQgdXBkYXRlcyB0aGUgbWFpbiBjYW1lcmFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbWVyYSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgY29uc3Qgd2lkdGggPSByZW5kZXJlci5kb21FbGVtZW50LndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgLy8gQ3JlYXRlIGFuZCBwb3NpdGlvbiBhIFBlcnNwZWN0aXZlIENhbWVyYVxuICAgIHRoaXMudGhyZWVDYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoQ29uZmlnLmNhbWVyYS5mb3YsIHdpZHRoIC8gaGVpZ2h0LCBDb25maWcuY2FtZXJhLm5lYXIsIENvbmZpZy5jYW1lcmEuZmFyKTtcbiAgICB0aGlzLnRocmVlQ2FtZXJhLnBvc2l0aW9uLnNldChDb25maWcuY2FtZXJhLnBvc1gsIENvbmZpZy5jYW1lcmEucG9zWSwgQ29uZmlnLmNhbWVyYS5wb3NaKTtcblxuICAgIC8vIEluaXRpYWwgc2l6aW5nXG4gICAgdGhpcy51cGRhdGVTaXplKHJlbmRlcmVyKTtcbiAgICBcbiAgICAvLyBMaXN0ZW5lcnNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy51cGRhdGVTaXplKHJlbmRlcmVyKSwgZmFsc2UpO1xuICB9XG5cbiAgdXBkYXRlU2l6ZShyZW5kZXJlcikge1xuICAgIC8vIFVwZGF0ZSBjYW1lcmEgYXNwZWN0IHJhdGlvIHdpdGggd2luZG93IGFzcGVjdCByYXRpb1xuICAgIHRoaXMudGhyZWVDYW1lcmEuYXNwZWN0ID0gcmVuZGVyZXIuZG9tRWxlbWVudC53aWR0aCAvIHJlbmRlcmVyLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgLy8gQWx3YXlzIGNhbGwgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCBvbiBjYW1lcmEgY2hhbmdlXG4gICAgdGhpcy50aHJlZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IE9yYml0Q29udHJvbHMgZnJvbSAnLi4vLi4vdXRpbHMvb3JiaXRDb250cm9scyc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcblxuLy8gQ29udHJvbHMgYmFzZWQgb24gb3JiaXQgY29udHJvbHNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xzIHtcbiAgY29uc3RydWN0b3IoY2FtZXJhLCBjb250YWluZXIpIHtcbiAgICAvLyBPcmJpdCBjb250cm9scyBmaXJzdCBuZWVkcyB0byBwYXNzIGluIFRIUkVFIHRvIGNvbnN0cnVjdG9yXG4gICAgY29uc3Qgb3JiaXRDb250cm9scyA9IG5ldyBPcmJpdENvbnRyb2xzKFRIUkVFKTtcbiAgICB0aGlzLnRocmVlQ29udHJvbHMgPSBuZXcgb3JiaXRDb250cm9scyhjYW1lcmEsIGNvbnRhaW5lcik7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy50aHJlZUNvbnRyb2xzLnRhcmdldC5zZXQoQ29uZmlnLmNvbnRyb2xzLnRhcmdldC54LCBDb25maWcuY29udHJvbHMudGFyZ2V0LnksIENvbmZpZy5jb250cm9scy50YXJnZXQueik7XG4gICAgdGhpcy50aHJlZUNvbnRyb2xzLmF1dG9Sb3RhdGUgPSBDb25maWcuY29udHJvbHMuYXV0b1JvdGF0ZTtcbiAgICB0aGlzLnRocmVlQ29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gQ29uZmlnLmNvbnRyb2xzLmF1dG9Sb3RhdGVTcGVlZDtcbiAgICB0aGlzLnRocmVlQ29udHJvbHMucm90YXRlU3BlZWQgPSBDb25maWcuY29udHJvbHMucm90YXRlU3BlZWQ7XG4gICAgdGhpcy50aHJlZUNvbnRyb2xzLnpvb21TcGVlZCA9IENvbmZpZy5jb250cm9scy56b29tU3BlZWQ7XG4gICAgdGhpcy50aHJlZUNvbnRyb2xzLm1pbkRpc3RhbmNlID0gQ29uZmlnLmNvbnRyb2xzLm1pbkRpc3RhbmNlO1xuICAgIHRoaXMudGhyZWVDb250cm9scy5tYXhEaXN0YW5jZSA9IENvbmZpZy5jb250cm9scy5tYXhEaXN0YW5jZTtcbiAgICB0aGlzLnRocmVlQ29udHJvbHMubWluUG9sYXJBbmdsZSA9IENvbmZpZy5jb250cm9scy5taW5Qb2xhckFuZ2xlO1xuICAgIHRoaXMudGhyZWVDb250cm9scy5tYXhQb2xhckFuZ2xlID0gQ29uZmlnLmNvbnRyb2xzLm1heFBvbGFyQW5nbGU7XG4gICAgdGhpcy50aHJlZUNvbnRyb2xzLmVuYWJsZURhbXBpbmcgPSBDb25maWcuY29udHJvbHMuZW5hYmxlRGFtcGluZztcbiAgICB0aGlzLnRocmVlQ29udHJvbHMuZW5hYmxlWm9vbSA9IENvbmZpZy5jb250cm9scy5lbmFibGVab29tO1xuICAgIHRoaXMudGhyZWVDb250cm9scy5kYW1waW5nRmFjdG9yID0gQ29uZmlnLmNvbnRyb2xzLmRhbXBpbmdGYWN0b3I7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIFNldHMgdXAgYW5kIHBsYWNlcyBhbGwgbGlnaHRzIGluIHNjZW5lXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodCB7XG4gIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIC8vIEFtYmllbnRcbiAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoQ29uZmlnLmFtYmllbnRMaWdodC5jb2xvcik7XG4gICAgdGhpcy5hbWJpZW50TGlnaHQudmlzaWJsZSA9IENvbmZpZy5hbWJpZW50TGlnaHQuZW5hYmxlZDtcblxuICAgIC8vIFBvaW50IGxpZ2h0XG4gICAgdGhpcy5wb2ludExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoQ29uZmlnLnBvaW50TGlnaHQuY29sb3IsIENvbmZpZy5wb2ludExpZ2h0LmludGVuc2l0eSwgQ29uZmlnLnBvaW50TGlnaHQuZGlzdGFuY2UpO1xuICAgIHRoaXMucG9pbnRMaWdodC5wb3NpdGlvbi5zZXQoQ29uZmlnLnBvaW50TGlnaHQueCwgQ29uZmlnLnBvaW50TGlnaHQueSwgQ29uZmlnLnBvaW50TGlnaHQueik7XG4gICAgdGhpcy5wb2ludExpZ2h0LnZpc2libGUgPSBDb25maWcucG9pbnRMaWdodC5lbmFibGVkO1xuXG4gICAgLy8gRGlyZWN0aW9uYWwgbGlnaHRcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodChDb25maWcuZGlyZWN0aW9uYWxMaWdodC5jb2xvciwgQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuaW50ZW5zaXR5KTtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LngsIENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LnksIENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LnopO1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC52aXNpYmxlID0gQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuZW5hYmxlZDtcblxuICAgIC8vIFNoYWRvdyBtYXBcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuY2FzdFNoYWRvdyA9IENvbmZpZy5zaGFkb3cuZW5hYmxlZDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmJpYXMgPSBDb25maWcuc2hhZG93LmJpYXM7XG4gICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IENvbmZpZy5zaGFkb3cubmVhcjtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSBDb25maWcuc2hhZG93LmZhcjtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gQ29uZmlnLnNoYWRvdy5sZWZ0O1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gQ29uZmlnLnNoYWRvdy5yaWdodDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSBDb25maWcuc2hhZG93LnRvcDtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSBDb25maWcuc2hhZG93LmJvdHRvbTtcbiAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSBDb25maWcuc2hhZG93Lm1hcFdpZHRoO1xuICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSBDb25maWcuc2hhZG93Lm1hcEhlaWdodDtcblxuICAgIC8vIFNoYWRvdyBjYW1lcmEgaGVscGVyXG4gICAgaWYoQ29uZmlnLmlzRGV2KSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHRIZWxwZXIgPSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhKTtcbiAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodEhlbHBlci52aXNpYmxlID0gQ29uZmlnLnNoYWRvdy5oZWxwZXJFbmFibGVkO1xuICAgIH1cbiAgICAvLyBIZW1pc3BoZXJlIGxpZ2h0XG4gICAgdGhpcy5oZW1pTGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KENvbmZpZy5oZW1pTGlnaHQuY29sb3IsIENvbmZpZy5oZW1pTGlnaHQuZ3JvdW5kQ29sb3IsIENvbmZpZy5oZW1pTGlnaHQuaW50ZW5zaXR5KTtcbiAgICB0aGlzLmhlbWlMaWdodC5wb3NpdGlvbi5zZXQoQ29uZmlnLmhlbWlMaWdodC54LCBDb25maWcuaGVtaUxpZ2h0LnksIENvbmZpZy5oZW1pTGlnaHQueik7XG4gICAgdGhpcy5oZW1pTGlnaHQudmlzaWJsZSA9IENvbmZpZy5oZW1pTGlnaHQuZW5hYmxlZDtcbiAgfVxuXG4gIHBsYWNlKGxpZ2h0TmFtZSkge1xuICAgIHN3aXRjaChsaWdodE5hbWUpIHtcbiAgICAgIGNhc2UgJ2FtYmllbnQnOlxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmFtYmllbnRMaWdodCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkaXJlY3Rpb25hbCc6XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZGlyZWN0aW9uYWxMaWdodCk7XG4gICAgICAgIGlmKENvbmZpZy5pc0Rldikge1xuICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZGlyZWN0aW9uYWxMaWdodEhlbHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5wb2ludExpZ2h0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2hlbWknOlxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmhlbWlMaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG4vLyBVU2UgdGhpcyBjbGFzcyBhcyBhIGhlbHBlciB0byBzZXQgdXAgc29tZSBkZWZhdWx0IG1hdGVyaWFsc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0ZXJpYWwge1xuICBjb25zdHJ1Y3Rvcihjb2xvciwgc2l6ZSA9IDEpIHtcbiAgICB0aGlzLmJhc2ljID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgIGNvbG9yLFxuICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGFuZGFyZCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7XG4gICAgICBjb2xvcixcbiAgICAgIHNoYWRpbmc6IFRIUkVFLkZsYXRTaGFkaW5nLFxuICAgICAgcm91Z2huZXNzOiAxLFxuICAgICAgbWV0YWxuZXNzOiAwLFxuICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgIH0pO1xuXG4gICAgdGhpcy53aXJlID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHt3aXJlZnJhbWU6IHRydWV9KTtcblxuICAgIHRoaXMucG9pbnRzID0gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKHtzaXplOiBzaXplLCBjb2xvcjogY29sb3J9KTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi9tYXRlcmlhbCc7XG5cbi8vIFRoaXMgaGVscGVyIGNsYXNzIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBhbmQgdGhlbiBwbGFjZSBwYXJ0aWNsZXMgaW4gdGhlIHNjZW5lXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZXMge1xuICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLmdlbyA9IG51bGw7XG4gIH1cblxuICBtYWtlKCkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmdlbyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIH07XG4gIH1cblxuICBwbGFjZShwb3NpdGlvbiwgcm90YXRpb24sIGNvbG9ySGV4ID0gMHhlZWVlZWUsIHBhcnRpY2xlU2l6ZSA9IDEpIHtcblxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKGNvbG9ySGV4LCBwYXJ0aWNsZVNpemUpLnBvaW50cztcblxuICAgIGNvbnN0IHBvaW50cyA9IG5ldyBUSFJFRS5Qb2ludHModGhpcy5nZW8sIG1hdGVyaWFsKTtcblxuICAgIC8vIFVzZSBFUzYgc3ByZWFkIHRvIHNldCBwb3NpdGlvbiBhbmQgcm90YXRpb24gZnJvbSBwYXNzZWQgaW4gYXJyYXlcbiAgICBwb2ludHMucG9zaXRpb24uc2V0KC4uLnBvc2l0aW9uKTtcbiAgICBwb2ludHMucm90YXRpb24uc2V0KC4uLnJvdGF0aW9uKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkKHBvaW50cyk7XG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVCdWZmZXJGbG9hdDMyKSB7XG4gICAgdGhpcy5nZW8uc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZUJ1ZmZlckZsb2F0MzIpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG4vLyBNYWluIHdlYkdMIHJlbmRlcmVyIGNsYXNzXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKHNjZW5lLCBjb250YWluZXIpIHtcbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuXG4gICAgLy8gQ3JlYXRlIFdlYkdMIHJlbmRlcmVyIGFuZCBzZXQgaXRzIGFudGlhbGlhc1xuICAgIHRoaXMudGhyZWVSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbnRpYWxpYXM6IHRydWV9KTtcblxuICAgIC8vIFNldCBjbGVhciBjb2xvciB0byBmb2cgdG8gZW5hYmxlIGZvZyBvciB0byBoZXggY29sb3IgZm9yIG5vIGZvZ1xuICAgIHRoaXMudGhyZWVSZW5kZXJlci5zZXRDbGVhckNvbG9yKHNjZW5lLmZvZy5jb2xvcik7XG4gICAgdGhpcy50aHJlZVJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pOyAvLyBGb3IgcmV0aW5hXG5cbiAgICAvLyBBcHBlbmRzIGNhbnZhc1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnRocmVlUmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICAvLyBTaGFkb3cgbWFwIG9wdGlvbnNcbiAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMudGhyZWVSZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNvZnRTaGFkb3dNYXA7XG5cbiAgICAvLyBHZXQgYW5pc290cm9weSBmb3IgdGV4dHVyZXNcbiAgICBDb25maWcubWF4QW5pc290cm9weSA9IHRoaXMudGhyZWVSZW5kZXJlci5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpO1xuXG4gICAgLy8gSW5pdGlhbCBzaXplIHVwZGF0ZSBzZXQgdG8gY2FudmFzIGNvbnRhaW5lclxuICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gTGlzdGVuZXJzXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHRoaXMudXBkYXRlU2l6ZSgpLCBmYWxzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMudXBkYXRlU2l6ZSgpLCBmYWxzZSk7XG4gIH1cblxuICB1cGRhdGVTaXplKCkge1xuICAgIHRoaXMudGhyZWVSZW5kZXJlci5zZXRTaXplKHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoLCB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xuICB9XG5cbiAgcmVuZGVyKHNjZW5lLCBjYW1lcmEpIHtcbiAgICAvLyBSZW5kZXJzIHNjZW5lIHRvIGNhbnZhcyB0YXJnZXRcbiAgICB0aGlzLnRocmVlUmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgR2FsYXh5SGVscGVycyBmcm9tICcuLi8uLi91dGlscy9nYWxheHlIZWxwZXJzJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYWxheHkge1xuICBjb25zdHJ1Y3RvcihwYXJ0aWNsZXMpIHtcbiAgICB0aGlzLnBhcnRpY2xlcyA9ICBwYXJ0aWNsZXM7XG4gICAgdGhpcy5zY2VuZSA9IHRoaXMucGFydGljbGVzLnNjZW5lO1xuICAgIHRoaXMuZW50aXR5ID0gbnVsbDtcbiAgfVxuXG4gIG1ha2UoKSB7XG5cbiAgICB0aGlzLnBhcnRpY2xlcy5tYWtlKCkoKTtcblxuICAgIGNvbnN0IGdhbGF4eVBhcnRpY2xlUG9zaXRpb25zID0gR2FsYXh5SGVscGVycy5nYWxheHlQYXJ0aWNsZVBvc2l0aW9ucyhcbiAgICAgIENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LnNpemUsXG4gICAgICBDb25maWcucGFydGljbGVzLmdhbGF4eS50aGV0YVNwcmVhZCxcbiAgICAgIENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LnRoZXRhUGlNdWx0aXBsaWVyLFxuICAgICAgQ29uZmlnLnBhcnRpY2xlcy5nYWxheHkucGhpU3ByZWFkXG4gICAgKTtcbiAgXG4gICAgdGhpcy5wYXJ0aWNsZXMuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKGdhbGF4eVBhcnRpY2xlUG9zaXRpb25zLCAzKSk7XG5cbiAgICB0aGlzLmVudGl0eSA9IHRoaXMucGFydGljbGVzLnBsYWNlKFswLCAwLCAwXSwgWzAsIDAsIDBdLCBDb25maWcucGFydGljbGVzLmdhbGF4eS5zdGFycy5jb2xvciwgQ29uZmlnLnBhcnRpY2xlcy5nYWxheHkuc3RhcnMuc2l6ZSk7XG4gICAgdGhpcy5lbnRpdHkudmlzaWJsZSA9IENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LmVuYWJsZWQ7XG5cbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmVudGl0eSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc2NlbmUucmVtb3ZlKHRoaXMuZW50aXR5KTtcbiAgfVxuXG4gIHNldFZpc2libGUodmFsdWUpIHtcbiAgICB0aGlzLmVudGl0eS52aXNpYmxlID0gdmFsdWU7XG4gIH1cbn1cbiIsIi8vIExvY2FsIHZhcnMgZm9yIHJTdGF0c1xubGV0IHJTLCBiUywgZ2xTLCB0UztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHMge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuXG4gIHNldFVwKCkge1xuICAgIGJTID0gbmV3IEJyb3dzZXJTdGF0cygpO1xuICAgIGdsUyA9IG5ldyBnbFN0YXRzKCk7XG4gICAgdFMgPSBuZXcgdGhyZWVTdGF0cyh0aGlzLnJlbmRlcmVyLnRocmVlUmVuZGVyZXIpO1xuXG4gICAgclMgPSBuZXcgclN0YXRzKHtcbiAgICAgIENTU1BhdGg6ICcuL2Nzcy8nLFxuICAgICAgdXNlclRpbWluZ0FQSTogdHJ1ZSxcbiAgICAgIHZhbHVlczoge1xuICAgICAgICBmcmFtZTogeyBjYXB0aW9uOiAnVG90YWwgZnJhbWUgdGltZSAobXMpJywgb3ZlcjogMTYsIGF2ZXJhZ2U6IHRydWUsIGF2Z01zOiAxMDAgfSxcbiAgICAgICAgZnBzOiB7IGNhcHRpb246ICdGcmFtZXJhdGUgKEZQUyknLCBiZWxvdzogMzAgfSxcbiAgICAgICAgY2FsbHM6IHsgY2FwdGlvbjogJ0NhbGxzICh0aHJlZS5qcyknLCBvdmVyOiAzMDAwIH0sXG4gICAgICAgIHJhZjogeyBjYXB0aW9uOiAnVGltZSBzaW5jZSBsYXN0IHJBRiAobXMpJywgYXZlcmFnZTogdHJ1ZSwgYXZnTXM6IDEwMCB9LFxuICAgICAgICByc3RhdHM6IHsgY2FwdGlvbjogJ3JTdGF0cyB1cGRhdGUgKG1zKScsIGF2ZXJhZ2U6IHRydWUsIGF2Z01zOiAxMDAgfSxcbiAgICAgICAgdGV4dHVyZTogeyBjYXB0aW9uOiAnR2VuVGV4JywgYXZlcmFnZTogdHJ1ZSwgYXZnTXM6IDEwMCB9XG4gICAgICB9LFxuICAgICAgZ3JvdXBzOiBbXG4gICAgICAgIHsgY2FwdGlvbjogJ0ZyYW1lcmF0ZScsIHZhbHVlczogWydmcHMnLCAncmFmJ10gfSxcbiAgICAgICAgeyBjYXB0aW9uOiAnRnJhbWUgQnVkZ2V0JywgdmFsdWVzOiBbJ2ZyYW1lJywgJ3RleHR1cmUnLCAnc2V0dXAnLCAncmVuZGVyJ10gfVxuICAgICAgXSxcbiAgICAgIGZyYWN0aW9uczogW1xuICAgICAgICB7IGJhc2U6ICdmcmFtZScsIHN0ZXBzOiBbJ3RleHR1cmUnLCAnc2V0dXAnLCAncmVuZGVyJ10gfVxuICAgICAgXSxcbiAgICAgIHBsdWdpbnM6IFtiUywgdFNdXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc3RhcnQoKSB7XG4gICAgclMoJ2ZyYW1lJykuc3RhcnQoKTtcbiAgICBnbFMuc3RhcnQoKTtcblxuICAgIHJTKCdyQUYnKS50aWNrKCk7XG4gICAgclMoJ0ZQUycpLmZyYW1lKCk7XG5cbiAgICByUygncmVuZGVyJykuc3RhcnQoKTtcbiAgfVxuXG4gIHN0YXRpYyBlbmQoKSB7XG4gICAgclMoJ3JlbmRlcicpLmVuZCgpOyAvLyByZW5kZXIgZmluaXNoZWRcbiAgICByUygnZnJhbWUnKS5lbmQoKTsgLy8gZnJhbWUgZmluaXNoZWRcblxuICAgIC8vIExvY2FsIHJTdGF0cyB1cGRhdGVcbiAgICByUygnclN0YXRzJykuc3RhcnQoKTtcbiAgICByUygpLnVwZGF0ZSgpO1xuICAgIHJTKCdyU3RhdHMnKS5lbmQoKTtcbiAgfVxufVxuIiwiLy8gR2xvYmFsIGltcG9ydHMgLVxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcblxuLy8gTG9jYWwgaW1wb3J0cyAtXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi9jb21wb25lbnRzL3JlbmRlcmVyJztcbmltcG9ydCBDYW1lcmEgZnJvbSAnLi9jb21wb25lbnRzL2NhbWVyYSc7XG5pbXBvcnQgTGlnaHQgZnJvbSAnLi9jb21wb25lbnRzL2xpZ2h0JztcbmltcG9ydCBDb250cm9scyBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbHMnO1xuLy8gaW1wb3J0IEdlb21ldHJ5IGZyb20gJy4vY29tcG9uZW50cy9nZW9tZXRyeSc7XG5pbXBvcnQgUGFydGljbGVzIGZyb20gJy4vY29tcG9uZW50cy9wYXJ0aWNsZXMnO1xuXG4vLyBFbnRpdGllc1xuaW1wb3J0IEdhbGF4eSBmcm9tICcuL2VudGl0aWVzL2dhbGF4eSc7XG5cbi8vIEhlbHBlcnNcbmltcG9ydCBTdGF0cyBmcm9tICcuL2hlbHBlcnMvc3RhdHMnO1xuLy8gaW1wb3J0IE1lc2hIZWxwZXIgZnJvbSAnLi9oZWxwZXJzL21lc2hIZWxwZXInO1xuLy8gaW1wb3J0IEdhbGF4eUhlbHBlcnMgZnJvbSAnLi4vdXRpbHMvZ2FsYXh5SGVscGVycyc7XG5cbi8vIE1vZGVsXG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL21vZGVsL3RleHR1cmUnO1xuLy8gaW1wb3J0IE1vZGVsIGZyb20gJy4vbW9kZWwvbW9kZWwnO1xuXG4vLyBNYW5hZ2Vyc1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJy4vbWFuYWdlcnMvaW50ZXJhY3Rpb24nO1xuaW1wb3J0IERhdEdVSSBmcm9tICcuL21hbmFnZXJzL2RhdEdVSSc7XG5cbi8vIGRhdGFcbmltcG9ydCBDb25maWcgZnJvbSAnLi8uLi9kYXRhL2NvbmZpZyc7XG4vLyAtLSBFbmQgb2YgaW1wb3J0c1xuXG4vLyBUaGlzIGNsYXNzIGluc3RhbnRpYXRlcyBhbmQgdGllcyBhbGwgb2YgdGhlIGNvbXBvbmVudHMgdG9nZXRoZXIsIHN0YXJ0cyB0aGUgbG9hZGluZyBwcm9jZXNzIGFuZCByZW5kZXJzIHRoZSBtYWluIGxvb3BcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4ge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAvLyBTZXQgY29udGFpbmVyIHByb3BlcnR5IHRvIGNvbnRhaW5lciBlbGVtZW50XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICAvLyBTdGFydCBUaHJlZSBjbG9ja1xuICAgIHRoaXMuY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTtcblxuICAgIC8vIE1haW4gc2NlbmUgY3JlYXRpb25cbiAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgdGhpcy5zY2VuZS5mb2cgPSBuZXcgVEhSRUUuRm9nRXhwMihDb25maWcuZm9nLmNvbG9yLCBDb25maWcuZm9nLm5lYXIpO1xuICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcihDb25maWcuYmFja2dyb3VuZC5jb2xvcik7XG5cbiAgICAvLyBHZXQgRGV2aWNlIFBpeGVsIFJhdGlvIGZpcnN0IGZvciByZXRpbmFcbiAgICBpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgQ29uZmlnLmRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cblxuICAgIC8vIE1haW4gcmVuZGVyZXIgY29uc3RydWN0b3JcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHRoaXMuc2NlbmUsIGNvbnRhaW5lcik7XG5cbiAgICAvLyBDb21wb25lbnRzIGluc3RhbnRpYXRpb25zXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMucmVuZGVyZXIudGhyZWVSZW5kZXJlcik7XG4gICAgdGhpcy5jb250cm9scyA9IG5ldyBDb250cm9scyh0aGlzLmNhbWVyYS50aHJlZUNhbWVyYSwgY29udGFpbmVyKTtcbiAgICB0aGlzLmxpZ2h0ID0gbmV3IExpZ2h0KHRoaXMuc2NlbmUpO1xuXG4gICAgLy8gQ3JlYXRlIGFuZCBwbGFjZSBsaWdodHMgaW4gc2NlbmVcbiAgICBjb25zdCBsaWdodHMgPSBbJ2FtYmllbnQnLCAnZGlyZWN0aW9uYWwnLCAncG9pbnQnLCAnaGVtaSddO1xuICAgIGxpZ2h0cy5mb3JFYWNoKChsaWdodCkgPT4gdGhpcy5saWdodC5wbGFjZShsaWdodCkpO1xuXG4gICAgLy8gQ3JlYXRlIGFuZCBwbGFjZSBnZW8gaW4gc2NlbmVcbiAgICAvLyB0aGlzLmdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHRoaXMuc2NlbmUpO1xuICAgIC8vIHRoaXMuZ2VvbWV0cnkubWFrZSgncGxhbmUnKSgxNTAsIDE1MCwgMTAsIDEwKTtcbiAgICAvLyB0aGlzLmdlb21ldHJ5LnBsYWNlKFswLCAtMjAsIDBdLCBbTWF0aC5QSSAvIDIsIDAsIDBdKTtcblxuICAgIC8vIE1ha2UgR2FsYXh5IFBhcnRpY2xlc1xuICAgIHRoaXMucGFydGljbGVzID0gbmV3IFBhcnRpY2xlcyh0aGlzLnNjZW5lKTtcblxuICAgIHRoaXMucGFydGljbGVzLmdhbGF4eSA9IG5ldyBHYWxheHkodGhpcy5wYXJ0aWNsZXMpO1xuICAgIHRoaXMucGFydGljbGVzLmdhbGF4eS5tYWtlKCk7XG5cbiAgICAvLyBTZXQgdXAgclN0YXRzIGlmIGRldiBlbnZpcm9ubWVudFxuICAgIGlmKENvbmZpZy5pc0RldiAmJiBDb25maWcuaXNTaG93aW5nU3RhdHMpIHtcbiAgICAgIHRoaXMuc3RhdHMgPSBuZXcgU3RhdHModGhpcy5yZW5kZXJlcik7XG4gICAgICB0aGlzLnN0YXRzLnNldFVwKCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIGd1aVxuICAgIGlmIChDb25maWcuaXNEZXYpIHtcbiAgICAgIHRoaXMuZ3VpID0gbmV3IERhdEdVSSh0aGlzKVxuICAgIH1cblxuICAgIC8vIEluc3RhbnRpYXRlIHRleHR1cmUgY2xhc3NcbiAgICB0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuXG4gICAgLy8gU3RhcnQgbG9hZGluZyB0aGUgdGV4dHVyZXMgYW5kIHRoZW4gZ28gb24gdG8gbG9hZCB0aGUgbW9kZWwgYWZ0ZXIgdGhlIHRleHR1cmUgUHJvbWlzZXMgaGF2ZSByZXNvbHZlZFxuICAgIHRoaXMudGV4dHVyZS5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLm1hbmFnZXIgPSBuZXcgVEhSRUUuTG9hZGluZ01hbmFnZXIoKTtcblxuICAgICAgLy8gVGV4dHVyZXMgbG9hZGVkLCBsb2FkIG1vZGVsXG4gICAgICAvLyB0aGlzLm1vZGVsID0gbmV3IE1vZGVsKHRoaXMuc2NlbmUsIHRoaXMubWFuYWdlciwgdGhpcy50ZXh0dXJlLnRleHR1cmVzKTtcbiAgICAgIC8vIHRoaXMubW9kZWwubG9hZChDb25maWcubW9kZWxzW0NvbmZpZy5tb2RlbC5zZWxlY3RlZF0udHlwZSk7XG5cbiAgICAgIC8vIG9uUHJvZ3Jlc3MgY2FsbGJhY2tcbiAgICAgIC8vIHRoaXMubWFuYWdlci5vblByb2dyZXNzID0gKGl0ZW0sIGxvYWRlZCwgdG90YWwpID0+IHtcbiAgICAgIC8vICAgY29uc29sZS5sb2coYCR7aXRlbX06ICR7bG9hZGVkfSAke3RvdGFsfWApO1xuICAgICAgLy8gfTtcblxuICAgICAgLy8gQWxsIGxvYWRlcnMgZG9uZSBub3dcbiAgICAgIC8vIHRoaXMubWFuYWdlci5vbkxvYWQgPSAoKSA9PiB7XG4gICAgICAvLyBTZXQgdXAgaW50ZXJhY3Rpb24gbWFuYWdlciB3aXRoIHRoZSBhcHAgbm93IHRoYXQgdGhlIG1vZGVsIGlzIGZpbmlzaGVkIGxvYWRpbmdcbiAgICAgIG5ldyBJbnRlcmFjdGlvbih0aGlzLnJlbmRlcmVyLnRocmVlUmVuZGVyZXIsIHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhLnRocmVlQ2FtZXJhLCB0aGlzLmNvbnRyb2xzLnRocmVlQ29udHJvbHMpO1xuXG4gICAgICAvLyBBZGQgZGF0LkdVSSBjb250cm9scyBpZiBkZXZcbiAgICAgIGlmKENvbmZpZy5pc0Rldikge1xuICAgICAgICAvLyB0aGlzLm1lc2hIZWxwZXIgPSBuZXcgTWVzaEhlbHBlcih0aGlzLnNjZW5lLCB0aGlzLm1vZGVsLm9iaik7XG4gICAgICAgIC8vIGlmIChDb25maWcubWVzaC5lbmFibGVIZWxwZXIpIHRoaXMubWVzaEhlbHBlci5lbmFibGUoKTtcblxuICAgICAgICB0aGlzLmd1aS5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgbm93IGZ1bGx5IGxvYWRlZFxuICAgICAgQ29uZmlnLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIC8vIH07XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydCByZW5kZXJpbmdcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXG4gIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgclN0YXRzIGlmIERldlxuICAgIGlmKENvbmZpZy5pc0RldiAmJiBDb25maWcuaXNTaG93aW5nU3RhdHMpIHtcbiAgICAgIFN0YXRzLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLy8gQ2FsbCByZW5kZXIgZnVuY3Rpb24gYW5kIHBhc3MgaW4gY3JlYXRlZCBzY2VuZSBhbmQgY2FtZXJhXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEudGhyZWVDYW1lcmEpO1xuXG4gICAgLy8gclN0YXRzIGhhcyBmaW5pc2hlZCBkZXRlcm1pbmluZyByZW5kZXIgY2FsbCBub3dcbiAgICBpZihDb25maWcuaXNEZXYgJiYgQ29uZmlnLmlzU2hvd2luZ1N0YXRzKSB7XG4gICAgICBTdGF0cy5lbmQoKTtcbiAgICB9XG5cbiAgICAvLyBEZWx0YSB0aW1lIGlzIHNvbWV0aW1lcyBuZWVkZWQgZm9yIGNlcnRhaW4gdXBkYXRlc1xuICAgIC8vY29uc3QgZGVsdGEgPSB0aGlzLmNsb2NrLmdldERlbHRhKCk7XG5cbiAgICAvLyBDYWxsIGFueSB2ZW5kb3Igb3IgbW9kdWxlIGZyYW1lIHVwZGF0ZXMgaGVyZVxuICAgIFRXRUVOLnVwZGF0ZSgpO1xuICAgIHRoaXMuY29udHJvbHMudGhyZWVDb250cm9scy51cGRhdGUoKTtcblxuICAgIC8vIFJBRlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTsgLy8gQmluZCB0aGUgbWFpbiBjbGFzcyBpbnN0ZWFkIG9mIHdpbmRvdyBvYmplY3RcbiAgfVxufVxuIiwiaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIE1hbmFnZXMgYWxsIGRhdC5HVUkgaW50ZXJhY3Rpb25zXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRHVUkge1xuICBjb25zdHJ1Y3RvcihtYWluKSB7XG4gICAgdGhpcy5ndWkgPSBuZXcgZGF0LkdVSSgpO1xuXG4gICAgdGhpcy5jYW1lcmEgPSBtYWluLmNhbWVyYS50aHJlZUNhbWVyYTtcbiAgICB0aGlzLmNvbnRyb2xzID0gbWFpbi5jb250cm9scy50aHJlZUNvbnRyb2xzO1xuICAgIHRoaXMubGlnaHQgPSBtYWluLmxpZ2h0O1xuICAgIHRoaXMuc2NlbmUgPSBtYWluLnNjZW5lO1xuICAgIHRoaXMucGFydGljbGVzID0gbWFpbi5wYXJ0aWNsZXM7XG5cbiAgICAvLyB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICAvLyB0aGlzLm1lc2hIZWxwZXIgPSBudWxsO1xuICB9XG5cbiAgbG9hZCgpIHtcbiAgICAvKiBHbG9iYWwgKi9cbiAgICAvL3RoaXMuZ3VpLmNsb3NlKCk7XG5cbiAgICAvLyB0aGlzLm1vZGVsID0gbWFpbi5tb2RlbDtcbiAgICAvLyB0aGlzLm1lc2hIZWxwZXIgPSBtYWluLm1lc2hIZWxwZXI7XG5cbiAgICAvKiBTY2VuZSAqL1xuICAgIGNvbnN0IHNjZW5lRm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdTY2VuZScpO1xuICAgIGNvbnN0IHNjZW5lQmdDb2xvckd1aSA9IHNjZW5lRm9sZGVyLmFkZENvbG9yKENvbmZpZy5iYWNrZ3JvdW5kLCAnY29sb3InKS5uYW1lKCdCYWNrZ3JvdW5kIENvbG9yJyk7XG4gICAgc2NlbmVCZ0NvbG9yR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5zY2VuZS5iYWNrZ3JvdW5kLnNldEhleCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKiBDYW1lcmEgKi9cbiAgICBjb25zdCBjYW1lcmFGb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoJ0NhbWVyYScpO1xuICAgIGNvbnN0IGNhbWVyYUZPVkd1aSA9IGNhbWVyYUZvbGRlci5hZGQoQ29uZmlnLmNhbWVyYSwgJ2ZvdicsIDAsIDE4MCkubmFtZSgnQ2FtZXJhIEZPVicpO1xuICAgIGNhbWVyYUZPVkd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuY2FtZXJhLmZvdiA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGNhbWVyYUZPVkd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBjYW1lcmFBc3BlY3RHdWkgPSBjYW1lcmFGb2xkZXIuYWRkKENvbmZpZy5jYW1lcmEsICdhc3BlY3QnLCAwLCA0KS5uYW1lKCdDYW1lcmEgQXNwZWN0Jyk7XG4gICAgY2FtZXJhQXNwZWN0R3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgY2FtZXJhQXNwZWN0R3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGNhbWVyYUZvZ0NvbG9yR3VpID0gY2FtZXJhRm9sZGVyLmFkZENvbG9yKENvbmZpZy5mb2csICdjb2xvcicpLm5hbWUoJ0ZvZyBDb2xvcicpO1xuICAgIGNhbWVyYUZvZ0NvbG9yR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5zY2VuZS5mb2cuY29sb3Iuc2V0SGV4KHZhbHVlKTtcbiAgICB9KTtcbiAgICBjb25zdCBjYW1lcmFGb2dOZWFyR3VpID0gY2FtZXJhRm9sZGVyLmFkZChDb25maWcuZm9nLCAnbmVhcicsIDAuMDAwLCAwLjAxMCkubmFtZSgnRm9nIE5lYXInKTtcbiAgICBjYW1lcmFGb2dOZWFyR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5zY2VuZS5mb2cuZGVuc2l0eSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGNhbWVyYUZvZ05lYXJHdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIH0pO1xuXG5cbiAgICAvKiBDb250cm9scyAqL1xuICAgIGNvbnN0IGNvbnRyb2xzRm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdDb250cm9scycpO1xuICAgIGNvbnRyb2xzRm9sZGVyLmFkZChDb25maWcuY29udHJvbHMsICdhdXRvUm90YXRlJykubmFtZSgnQXV0byBSb3RhdGUnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuYXV0b1JvdGF0ZSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRyb2xzQXV0b1JvdGF0ZVNwZWVkR3VpID0gY29udHJvbHNGb2xkZXIuYWRkKENvbmZpZy5jb250cm9scywgJ2F1dG9Sb3RhdGVTcGVlZCcsIC0xLCAxKS5uYW1lKCdSb3RhdGlvbiBTcGVlZCcpO1xuICAgIGNvbnRyb2xzQXV0b1JvdGF0ZVNwZWVkR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gdmFsdWU7XG4gICAgfSk7XG4gICAgY29udHJvbHNBdXRvUm90YXRlU3BlZWRHdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIH0pO1xuXG5cbiAgICAvLyAvKiBNb2RlbCAqL1xuICAgIC8vIGNvbnN0IG1vZGVsRm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdNb2RlbCcpO1xuICAgIC8vIG1vZGVsRm9sZGVyLmFkZChDb25maWcubW9kZWwsICd0eXBlJywgWy4uLkNvbmZpZy5tb2RlbC5pbml0aWFsVHlwZXNdKS5uYW1lKCdTZWxlY3QgTW9kZWwnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAvLyAgIGlmICh2YWx1ZSkge1xuICAgIC8vICAgICBpZiAoQ29uZmlnLm1lc2guZW5hYmxlSGVscGVyKVxuICAgIC8vICAgICAgIHRoaXMubWVzaEhlbHBlci5kaXNhYmxlKCk7XG5cbiAgICAvLyAgICAgQ29uZmlnLm1vZGVsLnNlbGVjdGVkID0gQ29uZmlnLm1vZGVsLmluaXRpYWxUeXBlcy5pbmRleE9mKHZhbHVlKTtcbiAgICAvLyAgICAgdGhpcy51bmxvYWQoKTtcbiAgICAvLyAgICAgdGhpcy5tb2RlbC51bmxvYWQoKTtcbiAgICAvLyAgICAgdGhpcy5tb2RlbC5sb2FkKHZhbHVlKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcblxuICAgIC8vIC8qIE1lc2ggKi9cbiAgICAvLyBjb25zdCBtZXNoRm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdNZXNoJyk7XG4gICAgLy8gbWVzaEZvbGRlci5hZGQoQ29uZmlnLm1lc2gsICdlbmFibGVIZWxwZXInLCB0cnVlKS5uYW1lKCdFbmFibGUgSGVscGVycycpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgIC8vICAgaWYodmFsdWUpIHtcbiAgICAvLyAgICAgdGhpcy5tZXNoSGVscGVyLmVuYWJsZSgpO1xuICAgIC8vICAgfSBlbHNlIHtcbiAgICAvLyAgICAgdGhpcy5tZXNoSGVscGVyLmRpc2FibGUoKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgICAvLyBtZXNoRm9sZGVyLmFkZChDb25maWcubWVzaCwgJ3RyYW5zbHVjZW50JywgdHJ1ZSkubmFtZSgnVHJhbnNsdWNlbnQnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAvLyAgIGlmKHZhbHVlKSB7XG4gICAgLy8gICAgIG1lc2gubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgIC8vICAgICBtZXNoLm1hdGVyaWFsLm9wYWNpdHkgPSAwLjU7XG4gICAgLy8gICB9IGVsc2Uge1xuICAgIC8vICAgICBtZXNoLm1hdGVyaWFsLm9wYWNpdHkgPSAxLjA7XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG4gICAgLy8gbWVzaEZvbGRlci5hZGQoQ29uZmlnLm1lc2gsICd3aXJlZnJhbWUnLCB0cnVlKS5uYW1lKCdXaXJlZnJhbWUnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAvLyAgIG1lc2gubWF0ZXJpYWwud2lyZWZyYW1lID0gdmFsdWU7XG4gICAgLy8gfSk7XG5cbiAgICAvKiBQYXJ0aWNsZXMgKi9cbiAgICAvLyBHYWxheHlcbiAgICBjb25zdCBwYXJ0aWNsZUZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcignUGFydGljbGVzJyk7XG4gICAgY29uc3QgZ2FsYXh5Rm9sZGVyID0gcGFydGljbGVGb2xkZXIuYWRkRm9sZGVyKCdHYWxheHknKTtcbiAgICBnYWxheHlGb2xkZXIuYWRkKENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LCAnZW5hYmxlZCcpLm5hbWUoJ0VuYWJsZWQnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMucGFydGljbGVzLmdhbGF4eS5zZXRWaXNpYmxlKHZhbHVlKTtcbiAgICB9KTtcbiAgICBnYWxheHlGb2xkZXIuYWRkKENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LCAnc2l6ZScpLm5hbWUoJ1NpemUnKS5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLnBhcnRpY2xlcy5nYWxheHkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5wYXJ0aWNsZXMuZ2FsYXh5Lm1ha2UoKTtcbiAgICB9KTtcbiAgICBnYWxheHlGb2xkZXIuYWRkKENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LCAndGhldGFTcHJlYWQnKS5uYW1lKCdUaGV0YSBTcHJlYWQnKS5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLnBhcnRpY2xlcy5nYWxheHkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5wYXJ0aWNsZXMuZ2FsYXh5Lm1ha2UoKTtcbiAgICB9KTtcbiAgICBnYWxheHlGb2xkZXIuYWRkKENvbmZpZy5wYXJ0aWNsZXMuZ2FsYXh5LCAndGhldGFQaU11bHRpcGxpZXInKS5uYW1lKCdUaGV0YSBQSSBNdWx0aXBsaWVyJykub25DaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5wYXJ0aWNsZXMuZ2FsYXh5LmRlc3Ryb3koKTtcbiAgICAgIHRoaXMucGFydGljbGVzLmdhbGF4eS5tYWtlKCk7XG4gICAgfSk7XG4gICAgZ2FsYXh5Rm9sZGVyLmFkZChDb25maWcucGFydGljbGVzLmdhbGF4eSwgJ3BoaVNwcmVhZCcpLm5hbWUoJ1BoaSBTcHJlYWQnKS5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLnBhcnRpY2xlcy5nYWxheHkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5wYXJ0aWNsZXMuZ2FsYXh5Lm1ha2UoKTtcbiAgICB9KTtcblxuICAgIC8qIExpZ2h0cyAqL1xuICAgIC8vIEFtYmllbnQgTGlnaHRcbiAgICBjb25zdCBhbWJpZW50TGlnaHRGb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoJ0FtYmllbnQgTGlnaHQnKTtcbiAgICBhbWJpZW50TGlnaHRGb2xkZXIuYWRkKENvbmZpZy5hbWJpZW50TGlnaHQsICdlbmFibGVkJykubmFtZSgnRW5hYmxlZCcpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5saWdodC5hbWJpZW50TGlnaHQudmlzaWJsZSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGFtYmllbnRMaWdodEZvbGRlci5hZGRDb2xvcihDb25maWcuYW1iaWVudExpZ2h0LCAnY29sb3InKS5uYW1lKCdDb2xvcicpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5saWdodC5hbWJpZW50TGlnaHQuY29sb3Iuc2V0SGV4KHZhbHVlKTtcbiAgICB9KTtcblxuXG4gICAgLy8gRGlyZWN0aW9uYWwgTGlnaHRcbiAgICBjb25zdCBkaXJlY3Rpb25hbExpZ2h0Rm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdEaXJlY3Rpb25hbCBMaWdodCcpO1xuICAgIGRpcmVjdGlvbmFsTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LCAnZW5hYmxlZCcpLm5hbWUoJ0VuYWJsZWQnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC52aXNpYmxlID0gdmFsdWU7XG4gICAgfSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodEZvbGRlci5hZGRDb2xvcihDb25maWcuZGlyZWN0aW9uYWxMaWdodCwgJ2NvbG9yJykubmFtZSgnQ29sb3InKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5jb2xvci5zZXRIZXgodmFsdWUpO1xuICAgIH0pO1xuICAgIGNvbnN0IGRpcmVjdGlvbmFsTGlnaHRJbnRlbnNpdHlHdWkgPSBkaXJlY3Rpb25hbExpZ2h0Rm9sZGVyLmFkZChDb25maWcuZGlyZWN0aW9uYWxMaWdodCwgJ2ludGVuc2l0eScsIDAsIDIpLm5hbWUoJ0ludGVuc2l0eScpO1xuICAgIGRpcmVjdGlvbmFsTGlnaHRJbnRlbnNpdHlHdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuaW50ZW5zaXR5ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodEludGVuc2l0eUd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWEd1aSA9IGRpcmVjdGlvbmFsTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LCAneCcsIC0xMDAwLCAxMDAwKS5uYW1lKCdQb3NpdGlvbiBYJyk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWEd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi54ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWEd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWUd1aSA9IGRpcmVjdGlvbmFsTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LCAneScsIC0xMDAwLCAxMDAwKS5uYW1lKCdQb3NpdGlvbiBZJyk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWUd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi55ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWUd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWkd1aSA9IGRpcmVjdGlvbmFsTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LCAneicsIC0xMDAwLCAxMDAwKS5uYW1lKCdQb3NpdGlvbiBaJyk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWkd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi56ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodFBvc2l0aW9uWkd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBTaGFkb3cgTWFwXG4gICAgY29uc3Qgc2hhZG93Rm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdTaGFkb3cgTWFwJyk7XG4gICAgc2hhZG93Rm9sZGVyLmFkZChDb25maWcuc2hhZG93LCAnZW5hYmxlZCcpLm5hbWUoJ0VuYWJsZWQnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5jYXN0U2hhZG93ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgc2hhZG93Rm9sZGVyLmFkZChDb25maWcuc2hhZG93LCAnaGVscGVyRW5hYmxlZCcpLm5hbWUoJ0hlbHBlciBFbmFibGVkJykub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHRIZWxwZXIudmlzaWJsZSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IHNoYWRvd05lYXJHdWkgPSBzaGFkb3dGb2xkZXIuYWRkKENvbmZpZy5zaGFkb3csICduZWFyJywgMCwgNDAwKS5uYW1lKCdOZWFyJyk7XG4gICAgc2hhZG93TmVhckd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dOZWFyR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwID0gbnVsbDtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodEhlbHBlci51cGRhdGUoKTtcbiAgICB9KTtcbiAgICBjb25zdCBzaGFkb3dGYXJHdWkgPSBzaGFkb3dGb2xkZXIuYWRkKENvbmZpZy5zaGFkb3csICdmYXInLCAwLCAxMjAwKS5uYW1lKCdGYXInKTtcbiAgICBzaGFkb3dGYXJHdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dGYXJHdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXAuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXAgPSBudWxsO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0SGVscGVyLnVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IHNoYWRvd1RvcEd1aSA9IHNoYWRvd0ZvbGRlci5hZGQoQ29uZmlnLnNoYWRvdywgJ3RvcCcsIC00MDAsIDQwMCkubmFtZSgnVG9wJyk7XG4gICAgc2hhZG93VG9wR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gdmFsdWU7XG4gICAgfSk7XG4gICAgc2hhZG93VG9wR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwID0gbnVsbDtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodEhlbHBlci51cGRhdGUoKTtcbiAgICB9KTtcbiAgICBjb25zdCBzaGFkb3dSaWdodEd1aSA9IHNoYWRvd0ZvbGRlci5hZGQoQ29uZmlnLnNoYWRvdywgJ3JpZ2h0JywgLTQwMCwgNDAwKS5uYW1lKCdSaWdodCcpO1xuICAgIHNoYWRvd1JpZ2h0R3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dSaWdodEd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcCA9IG51bGw7XG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHRIZWxwZXIudXBkYXRlKCk7XG4gICAgfSk7XG4gICAgY29uc3Qgc2hhZG93Qm90dG9tR3VpID0gc2hhZG93Rm9sZGVyLmFkZChDb25maWcuc2hhZG93LCAnYm90dG9tJywgLTQwMCwgNDAwKS5uYW1lKCdCb3R0b20nKTtcbiAgICBzaGFkb3dCb3R0b21HdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dCb3R0b21HdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXAuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXAgPSBudWxsO1xuICAgICAgdGhpcy5saWdodC5kaXJlY3Rpb25hbExpZ2h0SGVscGVyLnVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IHNoYWRvd0xlZnRHdWkgPSBzaGFkb3dGb2xkZXIuYWRkKENvbmZpZy5zaGFkb3csICdsZWZ0JywgLTQwMCwgNDAwKS5uYW1lKCdMZWZ0Jyk7XG4gICAgc2hhZG93TGVmdEd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dMZWZ0R3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwID0gbnVsbDtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodEhlbHBlci51cGRhdGUoKTtcbiAgICB9KTtcbiAgICBjb25zdCBzaGFkb3dCaWFzR3VpID0gc2hhZG93Rm9sZGVyLmFkZChDb25maWcuc2hhZG93LCAnYmlhcycsIC0wLjAwMDAxMCwgMSkubmFtZSgnQmlhcycpO1xuICAgIHNoYWRvd0JpYXNHdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmJpYXMgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBzaGFkb3dCaWFzR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwID0gbnVsbDtcbiAgICAgIHRoaXMubGlnaHQuZGlyZWN0aW9uYWxMaWdodEhlbHBlci51cGRhdGUoKTtcbiAgICB9KTtcblxuXG4gICAgLy8gUG9pbnQgTGlnaHRcbiAgICBjb25zdCBwb2ludExpZ2h0Rm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCdQb2ludCBMaWdodCcpO1xuICAgIHBvaW50TGlnaHRGb2xkZXIuYWRkKENvbmZpZy5wb2ludExpZ2h0LCAnZW5hYmxlZCcpLm5hbWUoJ0VuYWJsZWQnKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQucG9pbnRMaWdodC52aXNpYmxlID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcG9pbnRMaWdodEZvbGRlci5hZGRDb2xvcihDb25maWcucG9pbnRMaWdodCwgJ2NvbG9yJykubmFtZSgnQ29sb3InKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQucG9pbnRMaWdodC5jb2xvci5zZXRIZXgodmFsdWUpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBvaW50TGlnaHRJbnRlbnNpdHlHdWkgPSBwb2ludExpZ2h0Rm9sZGVyLmFkZChDb25maWcucG9pbnRMaWdodCwgJ2ludGVuc2l0eScsIDAsIDIpLm5hbWUoJ0ludGVuc2l0eScpO1xuICAgIHBvaW50TGlnaHRJbnRlbnNpdHlHdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LnBvaW50TGlnaHQuaW50ZW5zaXR5ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcG9pbnRMaWdodEludGVuc2l0eUd1aS5vbkZpbmlzaENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgcG9pbnRMaWdodERpc3RhbmNlR3VpID0gcG9pbnRMaWdodEZvbGRlci5hZGQoQ29uZmlnLnBvaW50TGlnaHQsICdkaXN0YW5jZScsIDAsIDEwMDApLm5hbWUoJ0Rpc3RhbmNlJyk7XG4gICAgcG9pbnRMaWdodERpc3RhbmNlR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5wb2ludExpZ2h0LmRpc3RhbmNlID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcG9pbnRMaWdodERpc3RhbmNlR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBwb2ludExpZ2h0UG9zaXRpb25YR3VpID0gcG9pbnRMaWdodEZvbGRlci5hZGQoQ29uZmlnLnBvaW50TGlnaHQsICd4JywgLTEwMDAsIDEwMDApLm5hbWUoJ1Bvc2l0aW9uIFgnKTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25YR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5wb2ludExpZ2h0LnBvc2l0aW9uLnggPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25YR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBwb2ludExpZ2h0UG9zaXRpb25ZR3VpID0gcG9pbnRMaWdodEZvbGRlci5hZGQoQ29uZmlnLnBvaW50TGlnaHQsICd5JywgLTEwMDAsIDEwMDApLm5hbWUoJ1Bvc2l0aW9uIFknKTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25ZR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5wb2ludExpZ2h0LnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25ZR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBwb2ludExpZ2h0UG9zaXRpb25aR3VpID0gcG9pbnRMaWdodEZvbGRlci5hZGQoQ29uZmlnLnBvaW50TGlnaHQsICd6JywgLTEwMDAsIDEwMDApLm5hbWUoJ1Bvc2l0aW9uIFonKTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25aR3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5wb2ludExpZ2h0LnBvc2l0aW9uLnogPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBwb2ludExpZ2h0UG9zaXRpb25aR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcblxuXG4gICAgLy8gSGVtaSBMaWdodFxuICAgIGNvbnN0IGhlbWlMaWdodEZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcignSGVtaSBMaWdodCcpO1xuICAgIGhlbWlMaWdodEZvbGRlci5hZGQoQ29uZmlnLmhlbWlMaWdodCwgJ2VuYWJsZWQnKS5uYW1lKCdFbmFibGVkJykub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmxpZ2h0LmhlbWlMaWdodC52aXNpYmxlID0gdmFsdWU7XG4gICAgfSk7XG4gICAgaGVtaUxpZ2h0Rm9sZGVyLmFkZENvbG9yKENvbmZpZy5oZW1pTGlnaHQsICdjb2xvcicpLm5hbWUoJ0NvbG9yJykub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmxpZ2h0LmhlbWlMaWdodC5jb2xvci5zZXRIZXgodmFsdWUpO1xuICAgIH0pO1xuICAgIGhlbWlMaWdodEZvbGRlci5hZGRDb2xvcihDb25maWcuaGVtaUxpZ2h0LCAnZ3JvdW5kQ29sb3InKS5uYW1lKCdncm91bmQgQ29sb3InKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMubGlnaHQuaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLnNldEhleCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgaGVtaUxpZ2h0SW50ZW5zaXR5R3VpID0gaGVtaUxpZ2h0Rm9sZGVyLmFkZChDb25maWcuaGVtaUxpZ2h0LCAnaW50ZW5zaXR5JywgMCwgMikubmFtZSgnSW50ZW5zaXR5Jyk7XG4gICAgaGVtaUxpZ2h0SW50ZW5zaXR5R3VpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5saWdodC5oZW1pTGlnaHQuaW50ZW5zaXR5ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgaGVtaUxpZ2h0SW50ZW5zaXR5R3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBoZW1pTGlnaHRQb3NpdGlvblhHdWkgPSBoZW1pTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5oZW1pTGlnaHQsICd4JywgLTEwMDAsIDEwMDApLm5hbWUoJ1Bvc2l0aW9uIFgnKTtcbiAgICBoZW1pTGlnaHRQb3NpdGlvblhHdWkub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxpZ2h0LmhlbWlMaWdodC5wb3NpdGlvbi54ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgaGVtaUxpZ2h0UG9zaXRpb25YR3VpLm9uRmluaXNoQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBoZW1pTGlnaHRQb3NpdGlvbllHdWkgPSBoZW1pTGlnaHRGb2xkZXIuYWRkKENvbmZpZy5oZW1pTGlnaHQsICd5JywgLTUwMCwgMTAwMCkubmFtZSgnUG9zaXRpb24gWScpO1xuICAgIGhlbWlMaWdodFBvc2l0aW9uWUd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuaGVtaUxpZ2h0LnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBoZW1pTGlnaHRQb3NpdGlvbllHdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGhlbWlMaWdodFBvc2l0aW9uWkd1aSA9IGhlbWlMaWdodEZvbGRlci5hZGQoQ29uZmlnLmhlbWlMaWdodCwgJ3onLCAtMTAwMCwgMTAwMCkubmFtZSgnUG9zaXRpb24gWicpO1xuICAgIGhlbWlMaWdodFBvc2l0aW9uWkd1aS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUm90YXRlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMubGlnaHQuaGVtaUxpZ2h0LnBvc2l0aW9uLnogPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBoZW1pTGlnaHRQb3NpdGlvblpHdWkub25GaW5pc2hDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdW5sb2FkKCkge1xuICAgIHRoaXMuZ3VpLmRlc3Ryb3koKTtcbiAgICB0aGlzLmd1aSA9IG5ldyBkYXQuR1VJKCk7XG4gIH1cbn1cbiIsImltcG9ydCBLZXlib2FyZCBmcm9tICcuLi8uLi91dGlscy9rZXlib2FyZCc7XG5pbXBvcnQgSGVscGVycyBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG4vLyBNYW5hZ2VzIGFsbCBpbnB1dCBpbnRlcmFjdGlvbnNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGVyYWN0aW9uIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGNvbnRyb2xzKSB7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgdGhpcy5jb250cm9scyA9IGNvbnRyb2xzO1xuXG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIEluc3RhbnRpYXRlIGtleWJvYXJkIGhlbHBlclxuICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcblxuICAgIC8vIExpc3RlbmVyc1xuICAgIC8vIE1vdXNlIGV2ZW50c1xuICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IEhlbHBlcnMudGhyb3R0bGUodGhpcy5vbk1vdXNlTW92ZShldmVudCksIDI1MCksIGZhbHNlKTtcbiAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChldmVudCkgPT4gdGhpcy5vbk1vdXNlTGVhdmUoZXZlbnQpLCBmYWxzZSk7XG4gICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChldmVudCkgPT4gdGhpcy5vbk1vdXNlT3ZlcihldmVudCksIGZhbHNlKTtcblxuICAgIC8vIEtleWJvYXJkIGV2ZW50c1xuICAgIHRoaXMua2V5Ym9hcmQuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBPbmx5IG9uY2VcbiAgICAgIGlmKGV2ZW50LnJlcGVhdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKHRoaXMua2V5Ym9hcmQuZXZlbnRNYXRjaGVzKGV2ZW50LCAnZXNjYXBlJykpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0VzY2FwZSBwcmVzc2VkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBvbk1vdXNlT3ZlcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBDb25maWcuaXNNb3VzZU92ZXIgPSB0cnVlO1xuICB9XG5cbiAgb25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIENvbmZpZy5pc01vdXNlT3ZlciA9IGZhbHNlO1xuICB9XG5cbiAgb25Nb3VzZU1vdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG5cbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgQ29uZmlnLmlzTW91c2VNb3ZpbmcgPSBmYWxzZTtcbiAgICB9LCAyMDApO1xuXG4gICAgQ29uZmlnLmlzTW91c2VNb3ZpbmcgPSB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG4vLyBQcm9taXNlIHBvbHlmaWxsIGZvciBJRVxuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJ2VzNi1wcm9taXNlJztcblxuaW1wb3J0IEhlbHBlcnMgZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcblxuLy8gVGhpcyBjbGFzcyBwcmVsb2FkcyBhbGwgdGV4dHVyZXMgaW4gdGhlIGltYWdlRmlsZXMgYXJyYXkgaW4gdGhlIENvbmZpZyB2aWEgRVM2IFByb21pc2VzLlxuLy8gT25jZSBhbGwgdGV4dHVyZXMgYXJlIGRvbmUgbG9hZGluZyB0aGUgbW9kZWwgaXRzZWxmIHdpbGwgYmUgbG9hZGVkIGFmdGVyIHRoZSBQcm9taXNlIC50aGVuKCkgY2FsbGJhY2suXG4vLyBVc2luZyBwcm9taXNlcyB0byBwcmVsb2FkIHRleHR1cmVzIHByZXZlbnRzIGlzc3VlcyB3aGVuIGFwcGx5aW5nIHRleHR1cmVzIHRvIG1hdGVyaWFsc1xuLy8gYmVmb3JlIHRoZSB0ZXh0dXJlcyBoYXZlIGxvYWRlZC5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBQcm9wIHRoYXQgd2lsbCBjb250YWluIGFsbCBsb2FkZWQgdGV4dHVyZXNcbiAgICB0aGlzLnRleHR1cmVzID0ge307XG4gIH1cblxuICBsb2FkKCkge1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XG4gICAgY29uc3QgbWF4QW5pc290cm9weSA9IENvbmZpZy5tYXhBbmlzb3Ryb3B5O1xuICAgIGNvbnN0IGltYWdlRmlsZXMgPSBDb25maWcudGV4dHVyZS5pbWFnZUZpbGVzO1xuICAgIGNvbnN0IHByb21pc2VBcnJheSA9IFtdO1xuXG4gICAgbG9hZGVyLnNldFBhdGgoQ29uZmlnLnRleHR1cmUucGF0aCk7XG5cbiAgICBpbWFnZUZpbGVzLmZvckVhY2goaW1hZ2VGaWxlID0+IHtcbiAgICAgIC8vIEFkZCBhbiBpbmRpdmlkdWFsIFByb21pc2UgZm9yIGVhY2ggaW1hZ2UgaW4gYXJyYXlcbiAgICAgIHByb21pc2VBcnJheS5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gRWFjaCBQcm9taXNlIHdpbGwgYXR0ZW1wdCB0byBsb2FkIHRoZSBpbWFnZSBmaWxlXG4gICAgICAgIGxvYWRlci5sb2FkKGltYWdlRmlsZS5pbWFnZSxcbiAgICAgICAgICAvLyBUaGlzIGdldHMgY2FsbGVkIG9uIGxvYWQgd2l0aCB0aGUgbG9hZGVkIHRleHR1cmVcbiAgICAgICAgICB0ZXh0dXJlID0+IHtcbiAgICAgICAgICAgIHRleHR1cmUuYW5pc290cm9weSA9IG1heEFuaXNvdHJvcHk7XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgUHJvbWlzZSB3aXRoIG9iamVjdCBvZiB0ZXh0dXJlIGlmIGl0IGlzIGluc3RhbmNlIG9mIFRIUkVFLlRleHR1cmVcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsT0JKID0ge307XG4gICAgICAgICAgICBtb2RlbE9CSltpbWFnZUZpbGUubmFtZV0gPSB0ZXh0dXJlO1xuICAgICAgICAgICAgaWYobW9kZWxPQkpbaW1hZ2VGaWxlLm5hbWVdIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZSlcbiAgICAgICAgICAgICAgcmVzb2x2ZShtb2RlbE9CSik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBIZWxwZXJzLmxvZ1Byb2dyZXNzKCksXG4gICAgICAgICAgeGhyID0+IHJlamVjdChuZXcgRXJyb3IoeGhyICsgJ0FuIGVycm9yIG9jY3VycmVkIGxvYWRpbmcgd2hpbGUgbG9hZGluZyAnICsgaW1hZ2VGaWxlLmltYWdlKSlcbiAgICAgICAgKVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGFsbCBQcm9taXNlcyBpbiBhcnJheSBhbmQgcmV0dXJuIGFub3RoZXIgUHJvbWlzZSB3aGVuIGFsbCBoYXZlIHJlc29sdmVkIG9yIGNvbnNvbGUgbG9nIHJlYXNvbiB3aGVuIGFueSByZWplY3RcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZUFycmF5KS50aGVuKHRleHR1cmVzID0+IHtcbiAgICAgIC8vIFNldCB0aGUgdGV4dHVyZXMgcHJvcCBvYmplY3QgdG8gaGF2ZSBuYW1lIGJlIHRoZSByZXNvbHZlZCB0ZXh0dXJlXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy50ZXh0dXJlc1tPYmplY3Qua2V5cyh0ZXh0dXJlc1tpXSlbMF1dID0gdGV4dHVyZXNbaV1bT2JqZWN0LmtleXModGV4dHVyZXNbaV0pWzBdXTtcbiAgICAgIH1cbiAgICB9LCByZWFzb24gPT4gY29uc29sZS5sb2cocmVhc29uKSk7XG4gIH1cbn1cbiIsImltcG9ydCBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcyc7XG5cbi8vIFRoaXMgb2JqZWN0IGNvbnRhaW5zIHRoZSBzdGF0ZSBvZiB0aGUgYXBwXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzRGV2OiBmYWxzZSxcbiAgaXNTaG93aW5nU3RhdHM6IHRydWUsXG4gIGlzTG9hZGVkOiBmYWxzZSxcbiAgaXNUd2VlbmluZzogZmFsc2UsXG4gIGlzUm90YXRpbmc6IHRydWUsXG4gIGlzTW91c2VNb3Zpbmc6IGZhbHNlLFxuICBpc01vdXNlT3ZlcjogZmFsc2UsXG4gIG1heEFuaXNvdHJvcHk6IDEsXG4gIGRwcjogMSxcbiAgZWFzaW5nOiBUV0VFTi5FYXNpbmcuUXVhZHJhdGljLkluT3V0LFxuICBkdXJhdGlvbjogNTAwLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgY29sb3I6IDB4MDAwMDAwXG4gIH0sXG4gIG1vZGVsOiB7XG4gICAgc2VsZWN0ZWQ6IDAsXG4gICAgaW5pdGlhbFR5cGVzOiBbJ2dsdGYnLCAnb2JqZWN0J10sXG4gICAgdHlwZTogJ2dsdGYnXG4gIH0sXG4gIG1vZGVsczogW1xuICAgIHtcbiAgICAgIHBhdGg6ICcuL2Fzc2V0cy9tb2RlbHMvZHVjay5nbHRmJyxcbiAgICAgIHNjYWxlOiAyMCxcbiAgICAgIHR5cGU6ICdnbHRmJ1xuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogJy4vYXNzZXRzL21vZGVscy9UZWFwb3QuanNvbicsXG4gICAgICBzY2FsZTogMjAsXG4gICAgICB0eXBlOiAnb2JqZWN0J1xuICAgIH1cbiAgXSxcbiAgdGV4dHVyZToge1xuICAgIHBhdGg6ICcuL2Fzc2V0cy90ZXh0dXJlcy8nLFxuICAgIGltYWdlRmlsZXM6IFtcbiAgICAgIHsgbmFtZTogJ1VWJywgaW1hZ2U6ICdVVl9HcmlkX1NtLmpwZycgfVxuICAgIF1cbiAgfSxcbiAgbWVzaDoge1xuICAgIGVuYWJsZUhlbHBlcjogdHJ1ZSxcbiAgICB3aXJlZnJhbWU6IGZhbHNlLFxuICAgIHRyYW5zbHVjZW50OiBmYWxzZSxcbiAgICBtYXRlcmlhbDoge1xuICAgICAgY29sb3I6IDB4ZmZmZmZmLFxuICAgICAgZW1pc3NpdmU6IDB4ZmZmZmZmXG4gICAgfVxuICB9LFxuICBwYXJ0aWNsZXM6IHtcbiAgICBnYWxheHk6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBzaXplOiAxMDAwLFxuICAgICAgdGhldGFTcHJlYWQ6IDIuMixcbiAgICAgIHRoZXRhUGlNdWx0aXBsaWVyOiAyLFxuICAgICAgcGhpU3ByZWFkOiAwLjUsXG4gICAgICBzdGFyczoge1xuICAgICAgICBjb2xvcjogMHhlZWVlZWUsXG4gICAgICAgIHNpemU6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGZvZzoge1xuICAgIGNvbG9yOiAweGZmZmZmZixcbiAgICBuZWFyOiAwLjAwMDhcbiAgfSxcbiAgY2FtZXJhOiB7XG4gICAgZm92OiAxMDAsXG4gICAgbmVhcjogMTAwLFxuICAgIGZhcjogNTAwMCxcbiAgICBhc3BlY3Q6IDEsXG4gICAgcG9zWDogMCxcbiAgICBwb3NZOiAwLFxuICAgIHBvc1o6IDIwMDBcbiAgfSxcbiAgY29udHJvbHM6IHtcbiAgICBhdXRvUm90YXRlOiB0cnVlLFxuICAgIGF1dG9Sb3RhdGVTcGVlZDogLTAuMDUsXG4gICAgcm90YXRlU3BlZWQ6IDAuNSxcbiAgICB6b29tU3BlZWQ6IDAuOCxcbiAgICBtaW5EaXN0YW5jZTogMjAwLFxuICAgIG1heERpc3RhbmNlOiA0MDAwLFxuICAgIG1pblBvbGFyQW5nbGU6IE1hdGguUEkgLyA1LFxuICAgIG1heFBvbGFyQW5nbGU6IE1hdGguUEkgLyAxLjUsXG4gICAgbWluQXppbXV0aEFuZ2xlOiAtSW5maW5pdHksXG4gICAgbWF4QXppbXV0aEFuZ2xlOiBJbmZpbml0eSxcbiAgICBlbmFibGVEYW1waW5nOiB0cnVlLFxuICAgIGRhbXBpbmdGYWN0b3I6IDAuNSxcbiAgICBlbmFibGVab29tOiB0cnVlLFxuICAgIHRhcmdldDoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB6OiAwXG4gICAgfVxuICB9LFxuICBhbWJpZW50TGlnaHQ6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGNvbG9yOiAweDE0MTQxNFxuICB9LFxuICBkaXJlY3Rpb25hbExpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHhmMGYwZjAsXG4gICAgaW50ZW5zaXR5OiAwLjQsXG4gICAgeDogLTc1LFxuICAgIHk6IDI4MCxcbiAgICB6OiAxNTBcbiAgfSxcbiAgc2hhZG93OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBoZWxwZXJFbmFibGVkOiBmYWxzZSxcbiAgICBiaWFzOiAwLFxuICAgIG1hcFdpZHRoOiAyMDQ4LFxuICAgIG1hcEhlaWdodDogMjA0OCxcbiAgICBuZWFyOiAyNTAsXG4gICAgZmFyOiA0MDAsXG4gICAgdG9wOiAxMDAsXG4gICAgcmlnaHQ6IDEwMCxcbiAgICBib3R0b206IC0xMDAsXG4gICAgbGVmdDogLTEwMFxuICB9LFxuICBwb2ludExpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgaW50ZW5zaXR5OiAwLjM0LFxuICAgIGRpc3RhbmNlOiAxMTUsXG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHo6IDBcbiAgfSxcbiAgaGVtaUxpZ2h0OiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBjb2xvcjogMHhjOGM4YzgsXG4gICAgZ3JvdW5kQ29sb3I6IDB4ZmZmZmZmLFxuICAgIGludGVuc2l0eTogMC41NSxcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMFxuICB9XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtci5kb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjYW52YXM6ICEhd2luZG93LkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgd2ViZ2w6IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgICByZXR1cm4gISEod2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJiAoY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KSgpLFxuXG4gIHdvcmtlcnM6ICEhd2luZG93LldvcmtlcixcbiAgZmlsZWFwaTogd2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIgJiYgd2luZG93LkZpbGVMaXN0ICYmIHdpbmRvdy5CbG9iLFxuXG4gIGdldFdlYkdMRXJyb3JNZXNzYWdlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuaWQgPSAnd2ViZ2wtZXJyb3ItbWVzc2FnZSc7XG4gICAgZWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gJ21vbm9zcGFjZSc7XG4gICAgZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcbiAgICBlbGVtZW50LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcbiAgICBlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZmZmJztcbiAgICBlbGVtZW50LnN0eWxlLmNvbG9yID0gJyMwMDAnO1xuICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICcxLjVlbSc7XG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9ICc0MDBweCc7XG4gICAgZWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnNWVtIGF1dG8gMCc7XG5cbiAgICBpZighdGhpcy53ZWJnbCkge1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSB3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ID8gW1xuICAgICAgICAnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXG4gICAgICAgICdGaW5kIG91dCBob3cgdG8gZ2V0IGl0IDxhIGhyZWY9XCJodHRwOi8vZ2V0LndlYmdsLm9yZy9cIiBzdHlsZT1cImNvbG9yOiMwMDAwMDBcIj5oZXJlPC9hPi4nXG4gICAgICBdLmpvaW4oJ1xcbicpIDogW1xuICAgICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+V2ViR0w8L2E+Ljxici8+JyxcbiAgICAgICAgJ0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMDAwMFwiPmhlcmU8L2E+LidcbiAgICAgIF0uam9pbignXFxuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgYWRkR2V0V2ViR0xNZXNzYWdlOiBmdW5jdGlvbihwYXJhbWV0ZXJzKSB7XG4gICAgdmFyIHBhcmVudCwgaWQsIGVsZW1lbnQ7XG5cbiAgICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcblxuICAgIHBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnBhcmVudCA6IGRvY3VtZW50LmJvZHk7XG4gICAgaWQgPSBwYXJhbWV0ZXJzLmlkICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmlkIDogJ29sZGllJztcblxuICAgIGVsZW1lbnQgPSB0aGlzLmdldFdlYkdMRXJyb3JNZXNzYWdlKCk7XG4gICAgZWxlbWVudC5pZCA9IGlkO1xuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICB9XG59O1xuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYWxheHlIZWxwZXJzIHtcblxuICBzdGF0aWMgbm9ybWFsUmFuZG9tKG1lYW4sIHN0ZCkge1xuICAgIGxldCBuID0gMDtcbiAgXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gMTI7IGkrKykge1xuICAgICAgbiArPSBNYXRoLnJhbmRvbSgpO1xuICAgIH1cbiAgXG4gICAgcmV0dXJuIChuIC0gNikgKiBzdGQgKyBtZWFuO1xuICB9XG5cbiAgc3RhdGljIGdhbGF4eVBhcnRpY2xlUG9zaXRpb25zKGdhbGF4eVNpemUgPSAxMDAwLCB0aGV0YVNwcmVhZCA9IDIuMiwgdGhldGFQaU11bHRpcGxpZXIgPSAyLCBwaGlTcHJlYWQgPSAwLjUpIHtcbiAgICBsZXQgbm9ybSA9IDA7XG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdhbGF4eVNpemU7IGkrKykge1xuICAgICAgbm9ybSA9IHRoaXMubm9ybWFsUmFuZG9tKDAuNSwgMC41KTtcbiAgICAgIGNvbnN0IHRoZXRhVmFyaWF0aW9uID0gVEhSRUUuTWF0aC5yYW5kRmxvYXRTcHJlYWQodGhldGFTcHJlYWQpO1xuICAgICAgY29uc3QgdGhldGEgPSBub3JtICogTWF0aC5QSSAqIHRoZXRhUGlNdWx0aXBsaWVyICsgdGhldGFWYXJpYXRpb247XG4gICAgICBjb25zdCBwaGkgPSBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZChwaGlTcHJlYWQpO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBub3JtICogZ2FsYXh5U2l6ZTtcblxuICAgICAgLy8gQXJtc1xuICAgICAgcG9zaXRpb25zLnB1c2goLWRpc3RhbmNlICogTWF0aC5jb3ModGhldGEpICogTWF0aC5jb3MocGhpKSk7XG4gICAgICBwb3NpdGlvbnMucHVzaCgtZGlzdGFuY2UgKiBNYXRoLnNpbih0aGV0YSkgKiBNYXRoLnNpbihwaGkpKTtcbiAgICAgIHBvc2l0aW9ucy5wdXNoKCBkaXN0YW5jZSAqIE1hdGguc2luKHRoZXRhKSk7XG5cbiAgICAgIHBvc2l0aW9ucy5wdXNoKCBkaXN0YW5jZSAqIE1hdGguY29zKHRoZXRhKSAqIE1hdGguY29zKHBoaSkpO1xuICAgICAgcG9zaXRpb25zLnB1c2goIGRpc3RhbmNlICogTWF0aC5zaW4odGhldGEpICogTWF0aC5zaW4ocGhpKSk7XG4gICAgICBwb3NpdGlvbnMucHVzaCgtZGlzdGFuY2UgKiBNYXRoLnNpbih0aGV0YSkpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uczsgIFxuICB9XG59XG4gIFxuIiwiLy8gUHJvdmlkZXMgc2ltcGxlIHN0YXRpYyBmdW5jdGlvbnMgdGhhdCBhcmUgdXNlZCBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgYXBwXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWxwZXJzIHtcbiAgc3RhdGljIHRocm90dGxlKGZuLCB0aHJlc2hob2xkLCBzY29wZSkge1xuICAgIHRocmVzaGhvbGQgfHwgKHRocmVzaGhvbGQgPSAyNTApO1xuICAgIGxldCBsYXN0LCBkZWZlclRpbWVyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICAgICBjb25zdCBub3cgPSArbmV3IERhdGUsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcbiAgICAgICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH0sIHRocmVzaGhvbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBsb2dQcm9ncmVzcygpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHhocikge1xuICAgICAgaWYgKHhoci5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRDb21wbGV0ZSA9IHhoci5sb2FkZWQgLyB4aHIudG90YWwgKiAxMDA7XG5cbiAgICAgICAgY29uc29sZS5sb2coTWF0aC5yb3VuZChwZXJjZW50Q29tcGxldGUsIDIpICsgJyUgZG93bmxvYWRlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBsb2dFcnJvcigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHhocikge1xuICAgICAgY29uc29sZS5lcnJvcih4aHIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBoYW5kbGVDb2xvckNoYW5nZShjb2xvcikge1xuICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnIycsICcweCcpO1xuICAgICAgfVxuXG4gICAgICBjb2xvci5zZXRIZXgodmFsdWUpO1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlKG1lc2gpIHtcbiAgICB0aGlzLm5lZWRzVXBkYXRlKG1lc2gubWF0ZXJpYWwsIG1lc2guZ2VvbWV0cnkpO1xuICB9XG5cbiAgc3RhdGljIG5lZWRzVXBkYXRlKG1hdGVyaWFsLCBnZW9tZXRyeSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBtYXRlcmlhbC5zaGFkaW5nID0gK21hdGVyaWFsLnNoYWRpbmc7IC8vRW5zdXJlIG51bWJlclxuICAgICAgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0gK21hdGVyaWFsLnZlcnRleENvbG9yczsgLy9FbnN1cmUgbnVtYmVyXG4gICAgICBtYXRlcmlhbC5zaWRlID0gK21hdGVyaWFsLnNpZGU7IC8vRW5zdXJlIG51bWJlclxuICAgICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlVGV4dHVyZShtYXRlcmlhbCwgbWF0ZXJpYWxLZXksIHRleHR1cmVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIG1hdGVyaWFsW21hdGVyaWFsS2V5XSA9IHRleHR1cmVzW2tleV07XG4gICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfTtcbiAgfVxuXG59XG4iLCJjb25zdCBBTElBUyA9IHtcbiAgJ2xlZnQnXHRcdDogMzcsXG4gICd1cCdcdFx0ICA6IDM4LFxuICAncmlnaHQnXHRcdDogMzksXG4gICdkb3duJ1x0XHQ6IDQwLFxuICAnc3BhY2UnXHRcdDogMzIsXG4gICd0YWInXHRcdCAgOiA5LFxuICAnZXNjYXBlJ1x0OiAyN1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5Ym9hcmQge1xuICBjb25zdHJ1Y3Rvcihkb21FbGVtZW50KSB7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudCB8fCBkb2N1bWVudDtcbiAgICB0aGlzLmtleUNvZGVzID0ge307XG5cbiAgICAvLyBiaW5kIGtleUV2ZW50c1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB0aGlzLm9uS2V5Q2hhbmdlKGV2ZW50KSwgZmFsc2UpO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4gdGhpcy5vbktleUNoYW5nZShldmVudCksIGZhbHNlKTtcblxuICAgIC8vIGJpbmQgd2luZG93IGJsdXJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHRoaXMub25CbHVyLCBmYWxzZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB0aGlzLm9uS2V5Q2hhbmdlKGV2ZW50KSwgZmFsc2UpO1xuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4gdGhpcy5vbktleUNoYW5nZShldmVudCksIGZhbHNlKTtcblxuICAgIC8vIHVuYmluZCB3aW5kb3cgYmx1ciBldmVudFxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4gdGhpcy5vbkJsdXIsIGZhbHNlKTtcbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBmb3IoY29uc3QgcHJvcCBpbiB0aGlzLmtleUNvZGVzKVxuICAgICAgdGhpcy5rZXlDb2Rlc1twcm9wXSA9IGZhbHNlO1xuICB9XG5cbiAgb25LZXlDaGFuZ2UoZXZlbnQpIHtcbiAgICAvLyBsb2cgdG8gZGVidWdcbiAgICAvL2NvbnNvbGUubG9nKCdvbktleUNoYW5nZScsIGV2ZW50LCBldmVudC5rZXlDb2RlLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSwgZXZlbnQuYWx0S2V5LCBldmVudC5tZXRhS2V5KVxuXG4gICAgLy8gdXBkYXRlIHRoaXMua2V5Q29kZXNcbiAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICB0aGlzLmtleUNvZGVzW2tleUNvZGVdID0gZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nO1xuICB9XG5cbiAgcHJlc3NlZChrZXlEZXNjKSB7XG4gICAgY29uc3Qga2V5cyA9IGtleURlc2Muc3BsaXQoJysnKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGxldCBwcmVzc2VkID0gZmFsc2U7XG4gICAgICBpZihPYmplY3Qua2V5cyhBTElBUykuaW5kZXhPZihrZXkpICE9IC0xKSB7XG4gICAgICAgIHByZXNzZWQgPSB0aGlzLmtleUNvZGVzW0FMSUFTW2tleV1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlc3NlZCA9IHRoaXMua2V5Q29kZXNba2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKV07XG4gICAgICB9XG4gICAgICBpZighcHJlc3NlZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZXZlbnRNYXRjaGVzKGV2ZW50LCBrZXlEZXNjKSB7XG4gICAgY29uc3QgYWxpYXNlcyA9IEFMSUFTO1xuICAgIGNvbnN0IGFsaWFzS2V5cyA9IE9iamVjdC5rZXlzKGFsaWFzZXMpO1xuICAgIGNvbnN0IGtleXMgPSBrZXlEZXNjLnNwbGl0KCcrJyk7XG4gICAgLy8gbG9nIHRvIGRlYnVnXG4gICAgLy8gY29uc29sZS5sb2coJ2V2ZW50TWF0Y2hlcycsIGV2ZW50LCBldmVudC5rZXlDb2RlLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSwgZXZlbnQuYWx0S2V5LCBldmVudC5tZXRhS2V5KVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgbGV0IHByZXNzZWQgPSBmYWxzZTtcbiAgICAgIGlmKGtleSA9PT0gJ3NoaWZ0Jykge1xuICAgICAgICBwcmVzc2VkID0gZXZlbnQuc2hpZnRLZXkgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9IGVsc2UgaWYoa2V5ID09PSAnY3RybCcpIHtcbiAgICAgICAgcHJlc3NlZCA9IGV2ZW50LmN0cmxLZXkgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9IGVsc2UgaWYoa2V5ID09PSAnYWx0Jykge1xuICAgICAgICBwcmVzc2VkID0gZXZlbnQuYWx0S2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmKGtleSA9PT0gJ21ldGEnKSB7XG4gICAgICAgIHByZXNzZWQgPSBldmVudC5tZXRhS2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmKGFsaWFzS2V5cy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgIHByZXNzZWQgPSBldmVudC5rZXlDb2RlID09PSBhbGlhc2VzW2tleV07XG4gICAgICB9IGVsc2UgaWYoZXZlbnQua2V5Q29kZSA9PT0ga2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmKCFwcmVzc2VkKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRIUkVFKSB7XG4gIHZhciBNT1VTRSA9IFRIUkVFLk1PVVNFO1xuICBpZiAoIU1PVVNFKSBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiB9O1xuXG4gIC8qKlxuICAgKiBAYXV0aG9yIHFpYW8gLyBodHRwczovL2dpdGh1Yi5jb20vcWlhb1xuICAgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tXG4gICAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gICAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICAgKiBAYXV0aG9yIGVyaWNoNjY2IC8gaHR0cDovL2VyaWNoYWluZXMuY29tXG4gICAqL1xuICAvKmdsb2JhbCBUSFJFRSwgY29uc29sZSAqL1xuXG4gIGZ1bmN0aW9uIE9yYml0Q29uc3RyYWludChvYmplY3QpIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuICAgIC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBvYmplY3Qgb3JiaXRzIGFyb3VuZFxuICAgIC8vIGFuZCB3aGVyZSBpdCBwYW5zIHdpdGggcmVzcGVjdCB0by5cbiAgICB0aGlzLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbiAgICAvLyBMaW1pdHMgdG8gaG93IGZhciB5b3UgY2FuIGRvbGx5IGluIGFuZCBvdXQgKCBQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5IClcbiAgICB0aGlzLm1pbkRpc3RhbmNlID0gMDtcbiAgICB0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XG5cbiAgICAvLyBMaW1pdHMgdG8gaG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dCAoIE9ydGhvZ3JhcGhpY0NhbWVyYSBvbmx5IClcbiAgICB0aGlzLm1pblpvb20gPSAwO1xuICAgIHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG4gICAgLy8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG4gICAgLy8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXG4gICAgdGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xuICAgIHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcblxuICAgIC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG4gICAgLy8gSWYgc2V0LCBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIHRoZSBpbnRlcnZhbCBbIC0gTWF0aC5QSSwgTWF0aC5QSSBdLlxuICAgIHRoaXMubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5OyAvLyByYWRpYW5zXG4gICAgdGhpcy5tYXhBemltdXRoQW5nbGUgPSBJbmZpbml0eTsgLy8gcmFkaWFuc1xuXG4gICAgLy8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIGRhbXBpbmcgKGluZXJ0aWEpXG4gICAgLy8gSWYgZGFtcGluZyBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3BcbiAgICB0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRhbXBpbmdGYWN0b3IgPSAwLjI1O1xuXG4gICAgLy8vLy8vLy8vLy8vXG4gICAgLy8gaW50ZXJuYWxzXG5cbiAgICB2YXIgc2NvcGUgPSB0aGlzO1xuXG4gICAgdmFyIEVQUyA9IDAuMDAwMDAxO1xuXG4gICAgLy8gQ3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgdmFyIHRoZXRhO1xuICAgIHZhciBwaGk7XG5cbiAgICAvLyBQZW5kaW5nIGNoYW5nZXNcbiAgICB2YXIgcGhpRGVsdGEgPSAwO1xuICAgIHZhciB0aGV0YURlbHRhID0gMDtcbiAgICB2YXIgc2NhbGUgPSAxO1xuICAgIHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgIHZhciB6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgLy8gQVBJXG5cbiAgICB0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcGhpO1xuICAgIH07XG5cbiAgICB0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoZXRhO1xuICAgIH07XG5cbiAgICB0aGlzLnJvdGF0ZUxlZnQgPSBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICAgIHRoZXRhRGVsdGEgLT0gYW5nbGU7XG4gICAgfTtcblxuICAgIHRoaXMucm90YXRlVXAgPSBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICAgIHBoaURlbHRhIC09IGFuZ2xlO1xuICAgIH07XG5cbiAgICAvLyBwYXNzIGluIGRpc3RhbmNlIGluIHdvcmxkIHNwYWNlIHRvIG1vdmUgbGVmdFxuICAgIHRoaXMucGFuTGVmdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KGRpc3RhbmNlKSB7XG4gICAgICAgIHZhciB0ZSA9IHRoaXMub2JqZWN0Lm1hdHJpeC5lbGVtZW50cztcblxuICAgICAgICAvLyBnZXQgWCBjb2x1bW4gb2YgbWF0cml4XG4gICAgICAgIHYuc2V0KHRlWzBdLCB0ZVsxXSwgdGVbMl0pO1xuICAgICAgICB2Lm11bHRpcGx5U2NhbGFyKC1kaXN0YW5jZSk7XG5cbiAgICAgICAgcGFuT2Zmc2V0LmFkZCh2KTtcbiAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIC8vIHBhc3MgaW4gZGlzdGFuY2UgaW4gd29ybGQgc3BhY2UgdG8gbW92ZSB1cFxuICAgIHRoaXMucGFuVXAgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcGFuVXAoZGlzdGFuY2UpIHtcbiAgICAgICAgdmFyIHRlID0gdGhpcy5vYmplY3QubWF0cml4LmVsZW1lbnRzO1xuXG4gICAgICAgIC8vIGdldCBZIGNvbHVtbiBvZiBtYXRyaXhcbiAgICAgICAgdi5zZXQodGVbNF0sIHRlWzVdLCB0ZVs2XSk7XG4gICAgICAgIHYubXVsdGlwbHlTY2FsYXIoZGlzdGFuY2UpO1xuXG4gICAgICAgIHBhbk9mZnNldC5hZGQodik7XG4gICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICAvLyBwYXNzIGluIHgseSBvZiBjaGFuZ2UgZGVzaXJlZCBpbiBwaXhlbCBzcGFjZSxcbiAgICAvLyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcbiAgICB0aGlzLnBhbiA9IGZ1bmN0aW9uIChkZWx0YVgsIGRlbHRhWSwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkge1xuICAgICAgaWYgKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XG4gICAgICAgIC8vIHBlcnNwZWN0aXZlXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcbiAgICAgICAgdmFyIG9mZnNldCA9IHBvc2l0aW9uLmNsb25lKCkuc3ViKHNjb3BlLnRhcmdldCk7XG4gICAgICAgIHZhciB0YXJnZXREaXN0YW5jZSA9IG9mZnNldC5sZW5ndGgoKTtcblxuICAgICAgICAvLyBoYWxmIG9mIHRoZSBmb3YgaXMgY2VudGVyIHRvIHRvcCBvZiBzY3JlZW5cbiAgICAgICAgdGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oKChzY29wZS5vYmplY3QuZm92IC8gMikgKiBNYXRoLlBJKSAvIDE4MC4wKTtcblxuICAgICAgICAvLyB3ZSBhY3R1YWxseSBkb24ndCB1c2Ugc2NyZWVuV2lkdGgsIHNpbmNlIHBlcnNwZWN0aXZlIGNhbWVyYSBpcyBmaXhlZCB0byBzY3JlZW4gaGVpZ2h0XG4gICAgICAgIHNjb3BlLnBhbkxlZnQoKDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSkgLyBzY3JlZW5IZWlnaHQpO1xuICAgICAgICBzY29wZS5wYW5VcCgoMiAqIGRlbHRhWSAqIHRhcmdldERpc3RhbmNlKSAvIHNjcmVlbkhlaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xuICAgICAgICAvLyBvcnRob2dyYXBoaWNcbiAgICAgICAgc2NvcGUucGFuTGVmdCgoZGVsdGFYICogKHNjb3BlLm9iamVjdC5yaWdodCAtIHNjb3BlLm9iamVjdC5sZWZ0KSkgLyBzY3JlZW5XaWR0aCk7XG4gICAgICAgIHNjb3BlLnBhblVwKChkZWx0YVkgKiAoc2NvcGUub2JqZWN0LnRvcCAtIHNjb3BlLm9iamVjdC5ib3R0b20pKSAvIHNjcmVlbkhlaWdodCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgb3IgcGVyc3BlY3RpdmVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBwYW4gZGlzYWJsZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmRvbGx5SW4gPSBmdW5jdGlvbiAoZG9sbHlTY2FsZSkge1xuICAgICAgaWYgKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XG4gICAgICAgIHNjYWxlIC89IGRvbGx5U2NhbGU7XG4gICAgICB9IGVsc2UgaWYgKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xuICAgICAgICBzY29wZS5vYmplY3Quem9vbSA9IE1hdGgubWF4KFxuICAgICAgICAgIHRoaXMubWluWm9vbSxcbiAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heFpvb20sIHRoaXMub2JqZWN0Lnpvb20gKiBkb2xseVNjYWxlKVxuICAgICAgICApO1xuICAgICAgICBzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICB6b29tQ2hhbmdlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmRvbGx5T3V0ID0gZnVuY3Rpb24gKGRvbGx5U2NhbGUpIHtcbiAgICAgIGlmIChzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSkge1xuICAgICAgICBzY2FsZSAqPSBkb2xseVNjYWxlO1xuICAgICAgfSBlbHNlIGlmIChzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEpIHtcbiAgICAgICAgc2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChcbiAgICAgICAgICB0aGlzLm1pblpvb20sXG4gICAgICAgICAgTWF0aC5taW4odGhpcy5tYXhab29tLCB0aGlzLm9iamVjdC56b29tIC8gZG9sbHlTY2FsZSlcbiAgICAgICAgKTtcbiAgICAgICAgc2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgem9vbUNoYW5nZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy51cGRhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbiAgICAgIC8vIHNvIGNhbWVyYS51cCBpcyB0aGUgb3JiaXQgYXhpc1xuICAgICAgdmFyIHF1YXQgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyhvYmplY3QudXAsIG5ldyBUSFJFRS5WZWN0b3IzKDAsIDEsIDApKTtcbiAgICAgIHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XG5cbiAgICAgIHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgdmFyIGxhc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5vYmplY3QucG9zaXRpb247XG5cbiAgICAgICAgb2Zmc2V0LmNvcHkocG9zaXRpb24pLnN1Yih0aGlzLnRhcmdldCk7XG5cbiAgICAgICAgLy8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG4gICAgICAgIG9mZnNldC5hcHBseVF1YXRlcm5pb24ocXVhdCk7XG5cbiAgICAgICAgLy8gYW5nbGUgZnJvbSB6LWF4aXMgYXJvdW5kIHktYXhpc1xuXG4gICAgICAgIHRoZXRhID0gTWF0aC5hdGFuMihvZmZzZXQueCwgb2Zmc2V0LnopO1xuXG4gICAgICAgIC8vIGFuZ2xlIGZyb20geS1heGlzXG5cbiAgICAgICAgcGhpID0gTWF0aC5hdGFuMihNYXRoLnNxcnQob2Zmc2V0LnggKiBvZmZzZXQueCArIG9mZnNldC56ICogb2Zmc2V0LnopLCBvZmZzZXQueSk7XG5cbiAgICAgICAgdGhldGEgKz0gdGhldGFEZWx0YTtcbiAgICAgICAgcGhpICs9IHBoaURlbHRhO1xuXG4gICAgICAgIC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcbiAgICAgICAgdGhldGEgPSBNYXRoLm1heCh0aGlzLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4odGhpcy5tYXhBemltdXRoQW5nbGUsIHRoZXRhKSk7XG5cbiAgICAgICAgLy8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcbiAgICAgICAgcGhpID0gTWF0aC5tYXgodGhpcy5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbih0aGlzLm1heFBvbGFyQW5nbGUsIHBoaSkpO1xuXG4gICAgICAgIC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWUgRVBTIGFuZCBQSS1FUFNcbiAgICAgICAgcGhpID0gTWF0aC5tYXgoRVBTLCBNYXRoLm1pbihNYXRoLlBJIC0gRVBTLCBwaGkpKTtcblxuICAgICAgICB2YXIgcmFkaXVzID0gb2Zmc2V0Lmxlbmd0aCgpICogc2NhbGU7XG5cbiAgICAgICAgLy8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcbiAgICAgICAgcmFkaXVzID0gTWF0aC5tYXgodGhpcy5taW5EaXN0YW5jZSwgTWF0aC5taW4odGhpcy5tYXhEaXN0YW5jZSwgcmFkaXVzKSk7XG5cbiAgICAgICAgLy8gbW92ZSB0YXJnZXQgdG8gcGFubmVkIGxvY2F0aW9uXG4gICAgICAgIHRoaXMudGFyZ2V0LmFkZChwYW5PZmZzZXQpO1xuXG4gICAgICAgIG9mZnNldC54ID0gcmFkaXVzICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgICAgb2Zmc2V0LnkgPSByYWRpdXMgKiBNYXRoLmNvcyhwaGkpO1xuICAgICAgICBvZmZzZXQueiA9IHJhZGl1cyAqIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSk7XG5cbiAgICAgICAgLy8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXG4gICAgICAgIG9mZnNldC5hcHBseVF1YXRlcm5pb24ocXVhdEludmVyc2UpO1xuXG4gICAgICAgIHBvc2l0aW9uLmNvcHkodGhpcy50YXJnZXQpLmFkZChvZmZzZXQpO1xuXG4gICAgICAgIHRoaXMub2JqZWN0Lmxvb2tBdCh0aGlzLnRhcmdldCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlRGFtcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoZXRhRGVsdGEgKj0gMSAtIHRoaXMuZGFtcGluZ0ZhY3RvcjtcbiAgICAgICAgICBwaGlEZWx0YSAqPSAxIC0gdGhpcy5kYW1waW5nRmFjdG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoZXRhRGVsdGEgPSAwO1xuICAgICAgICAgIHBoaURlbHRhID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlID0gMTtcbiAgICAgICAgcGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcblxuICAgICAgICAvLyB1cGRhdGUgY29uZGl0aW9uIGlzOlxuICAgICAgICAvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcbiAgICAgICAgLy8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHpvb21DaGFuZ2VkIHx8XG4gICAgICAgICAgbGFzdFBvc2l0aW9uLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxuICAgICAgICAgIDggKiAoMSAtIGxhc3RRdWF0ZXJuaW9uLmRvdCh0aGlzLm9iamVjdC5xdWF0ZXJuaW9uKSkgPiBFUFNcbiAgICAgICAgKSB7XG4gICAgICAgICAgbGFzdFBvc2l0aW9uLmNvcHkodGhpcy5vYmplY3QucG9zaXRpb24pO1xuICAgICAgICAgIGxhc3RRdWF0ZXJuaW9uLmNvcHkodGhpcy5vYmplY3QucXVhdGVybmlvbik7XG4gICAgICAgICAgem9vbUNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9KSgpO1xuICB9XG5cbiAgLy8gVGhpcyBzZXQgb2YgY29udHJvbHMgcGVyZm9ybXMgb3JiaXRpbmcsIGRvbGx5aW5nICh6b29taW5nKSwgYW5kIHBhbm5pbmcuIEl0IG1haW50YWluc1xuICAvLyB0aGUgXCJ1cFwiIGRpcmVjdGlvbiBhcyArWSwgdW5saWtlIHRoZSBUcmFja2JhbGxDb250cm9scy4gVG91Y2ggb24gdGFibGV0IGFuZCBwaG9uZXMgaXNcbiAgLy8gc3VwcG9ydGVkLlxuICAvL1xuICAvLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lIGZpbmdlciBtb3ZlXG4gIC8vICAgIFpvb20gLSBtaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvIGZpbmdlciBzcHJlYWQgb3Igc3F1aXNoXG4gIC8vICAgIFBhbiAtIHJpZ2h0IG1vdXNlLCBvciBhcnJvdyBrZXlzIC8gdG91Y2g6IHRocmVlIGZpbnRlciBzd2lwZVxuXG4gIGZ1bmN0aW9uIE9yYml0Q29udHJvbHMob2JqZWN0LCBkb21FbGVtZW50KSB7XG4gICAgdmFyIGNvbnN0cmFpbnQgPSBuZXcgT3JiaXRDb25zdHJhaW50KG9iamVjdCk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb21FbGVtZW50ICE9PSB1bmRlZmluZWQgPyBkb21FbGVtZW50IDogZG9jdW1lbnQ7XG5cbiAgICAvLyBBUElcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29uc3RyYWludCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWludC5nZXRQb2xhckFuZ2xlKCk7XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0QXppbXV0aGFsQW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWludC5nZXRBemltdXRoYWxBbmdsZSgpO1xuICAgIH07XG5cbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGNvbnRyb2xcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgLy8gY2VudGVyIGlzIG9sZCwgZGVwcmVjYXRlZDsgdXNlIFwidGFyZ2V0XCIgaW5zdGVhZFxuICAgIHRoaXMuY2VudGVyID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvLyBUaGlzIG9wdGlvbiBhY3R1YWxseSBlbmFibGVzIGRvbGx5aW5nIGluIGFuZCBvdXQ7IGxlZnQgYXMgXCJ6b29tXCIgZm9yXG4gICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZ1xuICAgIHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG4gICAgdGhpcy56b29tU3BlZWQgPSAxLjA7XG5cbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xuICAgIHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcbiAgICB0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xuICAgIHRoaXMuZW5hYmxlUGFuID0gdHJ1ZTtcbiAgICB0aGlzLmtleVBhblNwZWVkID0gNy4wOyAvLyBwaXhlbHMgbW92ZWQgcGVyIGFycm93IGtleSBwdXNoXG5cbiAgICAvLyBTZXQgdG8gdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHJvdGF0ZSBhcm91bmQgdGhlIHRhcmdldFxuICAgIC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxuICAgIHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuYXV0b1JvdGF0ZVNwZWVkID0gMi4wOyAvLyAzMCBzZWNvbmRzIHBlciByb3VuZCB3aGVuIGZwcyBpcyA2MFxuXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdXNlIG9mIHRoZSBrZXlzXG4gICAgdGhpcy5lbmFibGVLZXlzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBmb3VyIGFycm93IGtleXNcbiAgICB0aGlzLmtleXMgPSB7IExFRlQ6IDM3LCBVUDogMzgsIFJJR0hUOiAzOSwgQk9UVE9NOiA0MCB9O1xuXG4gICAgLy8gTW91c2UgYnV0dG9uc1xuICAgIHRoaXMubW91c2VCdXR0b25zID0ge1xuICAgICAgT1JCSVQ6IFRIUkVFLk1PVVNFLkxFRlQsXG4gICAgICBaT09NOiBUSFJFRS5NT1VTRS5NSURETEUsXG4gICAgICBQQU46IFRIUkVFLk1PVVNFLlJJR0hULFxuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy9cbiAgICAvLyBpbnRlcm5hbHNcblxuICAgIHZhciBzY29wZSA9IHRoaXM7XG5cbiAgICB2YXIgcm90YXRlU3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgIHZhciByb3RhdGVFbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgIHZhciByb3RhdGVEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICB2YXIgcGFuU3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgIHZhciBwYW5FbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgIHZhciBwYW5EZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICB2YXIgZG9sbHlTdGFydCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gICAgdmFyIGRvbGx5RW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbiAgICB2YXIgZG9sbHlEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICB2YXIgU1RBVEUgPSB7XG4gICAgICBOT05FOiAtMSxcbiAgICAgIFJPVEFURTogMCxcbiAgICAgIERPTExZOiAxLFxuICAgICAgUEFOOiAyLFxuICAgICAgVE9VQ0hfUk9UQVRFOiAzLFxuICAgICAgVE9VQ0hfRE9MTFk6IDQsXG4gICAgICBUT1VDSF9QQU46IDUsXG4gICAgfTtcblxuICAgIHZhciBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cbiAgICAvLyBmb3IgcmVzZXRcblxuICAgIHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XG4gICAgdGhpcy5wb3NpdGlvbjAgPSB0aGlzLm9iamVjdC5wb3NpdGlvbi5jbG9uZSgpO1xuICAgIHRoaXMuem9vbTAgPSB0aGlzLm9iamVjdC56b29tO1xuXG4gICAgLy8gZXZlbnRzXG5cbiAgICB2YXIgY2hhbmdlRXZlbnQgPSB7IHR5cGU6ICdjaGFuZ2UnIH07XG4gICAgdmFyIHN0YXJ0RXZlbnQgPSB7IHR5cGU6ICdzdGFydCcgfTtcbiAgICB2YXIgZW5kRXZlbnQgPSB7IHR5cGU6ICdlbmQnIH07XG5cbiAgICAvLyBwYXNzIGluIHgseSBvZiBjaGFuZ2UgZGVzaXJlZCBpbiBwaXhlbCBzcGFjZSxcbiAgICAvLyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcbiAgICBmdW5jdGlvbiBwYW4oZGVsdGFYLCBkZWx0YVkpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG4gICAgICBjb25zdHJhaW50LnBhbihkZWx0YVgsIGRlbHRhWSwgZWxlbWVudC5jbGllbnRXaWR0aCwgZWxlbWVudC5jbGllbnRIZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuYXV0b1JvdGF0ZSAmJiBzdGF0ZSA9PT0gU1RBVEUuTk9ORSkge1xuICAgICAgICBjb25zdHJhaW50LnJvdGF0ZUxlZnQoZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25zdHJhaW50LnVwZGF0ZSgpID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjaGFuZ2VFdmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cbiAgICAgIHRoaXMudGFyZ2V0LmNvcHkodGhpcy50YXJnZXQwKTtcbiAgICAgIHRoaXMub2JqZWN0LnBvc2l0aW9uLmNvcHkodGhpcy5wb3NpdGlvbjApO1xuICAgICAgdGhpcy5vYmplY3Quem9vbSA9IHRoaXMuem9vbTA7XG5cbiAgICAgIHRoaXMub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjaGFuZ2VFdmVudCk7XG5cbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkge1xuICAgICAgcmV0dXJuICgoMiAqIE1hdGguUEkpIC8gNjAgLyA2MCkgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KDAuOTUsIHNjb3BlLnpvb21TcGVlZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgIGlmIChzY29wZS5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuT1JCSVQpIHtcbiAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICBzdGF0ZSA9IFNUQVRFLlJPVEFURTtcblxuICAgICAgICByb3RhdGVTdGFydC5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gc2NvcGUubW91c2VCdXR0b25zLlpPT00pIHtcbiAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgc3RhdGUgPSBTVEFURS5ET0xMWTtcblxuICAgICAgICBkb2xseVN0YXJ0LnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuUEFOKSB7XG4gICAgICAgIGlmIChzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgc3RhdGUgPSBTVEFURS5QQU47XG5cbiAgICAgICAgcGFuU3RhcnQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLk5PTkUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UpO1xuICAgICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KHN0YXJ0RXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICBpZiAoc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gU1RBVEUuUk9UQVRFKSB7XG4gICAgICAgIGlmIChzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgcm90YXRlRW5kLnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgcm90YXRlRGVsdGEuc3ViVmVjdG9ycyhyb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0KTtcblxuICAgICAgICAvLyByb3RhdGluZyBhY3Jvc3Mgd2hvbGUgc2NyZWVuIGdvZXMgMzYwIGRlZ3JlZXMgYXJvdW5kXG4gICAgICAgIGNvbnN0cmFpbnQucm90YXRlTGVmdChcbiAgICAgICAgICAoKDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCkgLyBlbGVtZW50LmNsaWVudFdpZHRoKSAqIHNjb3BlLnJvdGF0ZVNwZWVkXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gcm90YXRpbmcgdXAgYW5kIGRvd24gYWxvbmcgd2hvbGUgc2NyZWVuIGF0dGVtcHRzIHRvIGdvIDM2MCwgYnV0IGxpbWl0ZWQgdG8gMTgwXG4gICAgICAgIGNvbnN0cmFpbnQucm90YXRlVXAoXG4gICAgICAgICAgKCgyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQpICogc2NvcGUucm90YXRlU3BlZWRcbiAgICAgICAgKTtcblxuICAgICAgICByb3RhdGVTdGFydC5jb3B5KHJvdGF0ZUVuZCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTVEFURS5ET0xMWSkge1xuICAgICAgICBpZiAoc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICBkb2xseUVuZC5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgIGRvbGx5RGVsdGEuc3ViVmVjdG9ycyhkb2xseUVuZCwgZG9sbHlTdGFydCk7XG5cbiAgICAgICAgaWYgKGRvbGx5RGVsdGEueSA+IDApIHtcbiAgICAgICAgICBjb25zdHJhaW50LmRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGRvbGx5RGVsdGEueSA8IDApIHtcbiAgICAgICAgICBjb25zdHJhaW50LmRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvbGx5U3RhcnQuY29weShkb2xseUVuZCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTVEFURS5QQU4pIHtcbiAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICBwYW5FbmQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgICBwYW5EZWx0YS5zdWJWZWN0b3JzKHBhbkVuZCwgcGFuU3RhcnQpO1xuXG4gICAgICAgIHBhbihwYW5EZWx0YS54LCBwYW5EZWx0YS55KTtcblxuICAgICAgICBwYW5TdGFydC5jb3B5KHBhbkVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSAhPT0gU1RBVEUuTk9ORSkgc2NvcGUudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZVVwKC8qIGV2ZW50ICovKSB7XG4gICAgICBpZiAoc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlKTtcbiAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoZW5kRXZlbnQpO1xuICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VXaGVlbChldmVudCkge1xuICAgICAgaWYgKHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlIHx8IHN0YXRlICE9PSBTVEFURS5OT05FKSByZXR1cm47XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgdmFyIGRlbHRhID0gMDtcblxuICAgICAgaWYgKGV2ZW50LndoZWVsRGVsdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBXZWJLaXQgLyBPcGVyYSAvIEV4cGxvcmVyIDlcblxuICAgICAgICBkZWx0YSA9IGV2ZW50LndoZWVsRGVsdGE7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmRldGFpbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZpcmVmb3hcblxuICAgICAgICBkZWx0YSA9IC1ldmVudC5kZXRhaWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWx0YSA+IDApIHtcbiAgICAgICAgY29uc3RyYWludC5kb2xseU91dChnZXRab29tU2NhbGUoKSk7XG4gICAgICB9IGVsc2UgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICBjb25zdHJhaW50LmRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xuICAgICAgfVxuXG4gICAgICBzY29wZS51cGRhdGUoKTtcbiAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoc3RhcnRFdmVudCk7XG4gICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KGVuZEV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbktleURvd24oZXZlbnQpIHtcbiAgICAgIGlmIChzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVLZXlzID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIHNjb3BlLmtleXMuVVA6XG4gICAgICAgICAgcGFuKDAsIHNjb3BlLmtleVBhblNwZWVkKTtcbiAgICAgICAgICBzY29wZS51cGRhdGUoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHNjb3BlLmtleXMuQk9UVE9NOlxuICAgICAgICAgIHBhbigwLCAtc2NvcGUua2V5UGFuU3BlZWQpO1xuICAgICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugc2NvcGUua2V5cy5MRUZUOlxuICAgICAgICAgIHBhbihzY29wZS5rZXlQYW5TcGVlZCwgMCk7XG4gICAgICAgICAgc2NvcGUudXBkYXRlKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBzY29wZS5rZXlzLlJJR0hUOlxuICAgICAgICAgIHBhbigtc2NvcGUua2V5UGFuU3BlZWQsIDApO1xuICAgICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvdWNoc3RhcnQoZXZlbnQpIHtcbiAgICAgIGlmIChzY29wZS5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMTogLy8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcbiAgICAgICAgICBpZiAoc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ST1RBVEU7XG5cbiAgICAgICAgICByb3RhdGVTdGFydC5zZXQoZXZlbnQudG91Y2hlc1swXS5wYWdlWCwgZXZlbnQudG91Y2hlc1swXS5wYWdlWSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOiAvLyB0d28tZmluZ2VyZWQgdG91Y2g6IGRvbGx5XG4gICAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZO1xuXG4gICAgICAgICAgdmFyIGR4ID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbMV0ucGFnZVg7XG4gICAgICAgICAgdmFyIGR5ID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWSAtIGV2ZW50LnRvdWNoZXNbMV0ucGFnZVk7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgICBkb2xseVN0YXJ0LnNldCgwLCBkaXN0YW5jZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXG4gICAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICAgIHN0YXRlID0gU1RBVEUuVE9VQ0hfUEFOO1xuXG4gICAgICAgICAgcGFuU3RhcnQuc2V0KGV2ZW50LnRvdWNoZXNbMF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbMF0ucGFnZVkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLk5PTkUpIHNjb3BlLmRpc3BhdGNoRXZlbnQoc3RhcnRFdmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2htb3ZlKGV2ZW50KSB7XG4gICAgICBpZiAoc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcblxuICAgICAgc3dpdGNoIChldmVudC50b3VjaGVzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6IC8vIG9uZS1maW5nZXJlZCB0b3VjaDogcm90YXRlXG4gICAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLlRPVUNIX1JPVEFURSkgcmV0dXJuO1xuXG4gICAgICAgICAgcm90YXRlRW5kLnNldChldmVudC50b3VjaGVzWzBdLnBhZ2VYLCBldmVudC50b3VjaGVzWzBdLnBhZ2VZKTtcbiAgICAgICAgICByb3RhdGVEZWx0YS5zdWJWZWN0b3JzKHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQpO1xuXG4gICAgICAgICAgLy8gcm90YXRpbmcgYWNyb3NzIHdob2xlIHNjcmVlbiBnb2VzIDM2MCBkZWdyZWVzIGFyb3VuZFxuICAgICAgICAgIGNvbnN0cmFpbnQucm90YXRlTGVmdChcbiAgICAgICAgICAgICgoMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS54KSAvIGVsZW1lbnQuY2xpZW50V2lkdGgpICogc2NvcGUucm90YXRlU3BlZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxuICAgICAgICAgIGNvbnN0cmFpbnQucm90YXRlVXAoXG4gICAgICAgICAgICAoKDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCkgKiBzY29wZS5yb3RhdGVTcGVlZFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByb3RhdGVTdGFydC5jb3B5KHJvdGF0ZUVuZCk7XG5cbiAgICAgICAgICBzY29wZS51cGRhdGUoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6IC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcbiAgICAgICAgICBpZiAoc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLlRPVUNIX0RPTExZKSByZXR1cm47XG5cbiAgICAgICAgICB2YXIgZHggPSBldmVudC50b3VjaGVzWzBdLnBhZ2VYIC0gZXZlbnQudG91Y2hlc1sxXS5wYWdlWDtcbiAgICAgICAgICB2YXIgZHkgPSBldmVudC50b3VjaGVzWzBdLnBhZ2VZIC0gZXZlbnQudG91Y2hlc1sxXS5wYWdlWTtcbiAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gICAgICAgICAgZG9sbHlFbmQuc2V0KDAsIGRpc3RhbmNlKTtcbiAgICAgICAgICBkb2xseURlbHRhLnN1YlZlY3RvcnMoZG9sbHlFbmQsIGRvbGx5U3RhcnQpO1xuXG4gICAgICAgICAgaWYgKGRvbGx5RGVsdGEueSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQuZG9sbHlPdXQoZ2V0Wm9vbVNjYWxlKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZG9sbHlEZWx0YS55IDwgMCkge1xuICAgICAgICAgICAgY29uc3RyYWludC5kb2xseUluKGdldFpvb21TY2FsZSgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2xseVN0YXJ0LmNvcHkoZG9sbHlFbmQpO1xuXG4gICAgICAgICAgc2NvcGUudXBkYXRlKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXG4gICAgICAgICAgaWYgKHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLlRPVUNIX1BBTikgcmV0dXJuO1xuXG4gICAgICAgICAgcGFuRW5kLnNldChldmVudC50b3VjaGVzWzBdLnBhZ2VYLCBldmVudC50b3VjaGVzWzBdLnBhZ2VZKTtcbiAgICAgICAgICBwYW5EZWx0YS5zdWJWZWN0b3JzKHBhbkVuZCwgcGFuU3RhcnQpO1xuXG4gICAgICAgICAgcGFuKHBhbkRlbHRhLngsIHBhbkRlbHRhLnkpO1xuXG4gICAgICAgICAgcGFuU3RhcnQuY29weShwYW5FbmQpO1xuXG4gICAgICAgICAgc2NvcGUudXBkYXRlKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmQoLyogZXZlbnQgKi8pIHtcbiAgICAgIGlmIChzY29wZS5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KGVuZEV2ZW50KTtcbiAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZXh0bWVudShldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBjb250ZXh0bWVudSwgZmFsc2UpO1xuICAgICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uTW91c2VEb3duLCBmYWxzZSk7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UpO1xuICAgICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ01vek1vdXNlUGl4ZWxTY3JvbGwnLCBvbk1vdXNlV2hlZWwsIGZhbHNlKTsgLy8gZmlyZWZveFxuXG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvdWNoc3RhcnQsIGZhbHNlKTtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoZW5kLCBmYWxzZSk7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2htb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSk7XG5cbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGNvbnRleHRtZW51LCBmYWxzZSk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UpO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdNb3pNb3VzZVBpeGVsU2Nyb2xsJywgb25Nb3VzZVdoZWVsLCBmYWxzZSk7IC8vIGZpcmVmb3hcblxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydCwgZmFsc2UpO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoZW5kLCBmYWxzZSk7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNobW92ZSwgZmFsc2UpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24sIGZhbHNlKTtcblxuICAgIC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBPcmJpdENvbnRyb2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSk7XG4gIE9yYml0Q29udHJvbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT3JiaXRDb250cm9scztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPcmJpdENvbnRyb2xzLnByb3RvdHlwZSwge1xuICAgIG9iamVjdDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQub2JqZWN0O1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgdGFyZ2V0OiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RyYWludC50YXJnZXQ7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLk9yYml0Q29udHJvbHM6IHRhcmdldCBpcyBub3cgaW1tdXRhYmxlLiBVc2UgdGFyZ2V0LnNldCgpIGluc3RlYWQuJyk7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC50YXJnZXQuY29weSh2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBtaW5EaXN0YW5jZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQubWluRGlzdGFuY2U7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnQubWluRGlzdGFuY2UgPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG1heERpc3RhbmNlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RyYWludC5tYXhEaXN0YW5jZTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5tYXhEaXN0YW5jZSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgbWluWm9vbToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQubWluWm9vbTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5taW5ab29tID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBtYXhab29tOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RyYWludC5tYXhab29tO1xuICAgICAgfSxcblxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50Lm1heFpvb20gPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG1pblBvbGFyQW5nbGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJhaW50Lm1pblBvbGFyQW5nbGU7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnQubWluUG9sYXJBbmdsZSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgbWF4UG9sYXJBbmdsZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQubWF4UG9sYXJBbmdsZTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5tYXhQb2xhckFuZ2xlID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBtaW5BemltdXRoQW5nbGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJhaW50Lm1pbkF6aW11dGhBbmdsZTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5taW5BemltdXRoQW5nbGUgPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG1heEF6aW11dGhBbmdsZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQubWF4QXppbXV0aEFuZ2xlO1xuICAgICAgfSxcblxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50Lm1heEF6aW11dGhBbmdsZSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgZW5hYmxlRGFtcGluZzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnQuZW5hYmxlRGFtcGluZztcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5lbmFibGVEYW1waW5nID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBkYW1waW5nRmFjdG9yOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RyYWludC5kYW1waW5nRmFjdG9yO1xuICAgICAgfSxcblxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50LmRhbXBpbmdGYWN0b3IgPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuICAgIG5vWm9vbToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVEhSRUUuT3JiaXRDb250cm9sczogLm5vWm9vbSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVpvb20gaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLmVuYWJsZVpvb207XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1pvb20gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVab29tIGluc3RlYWQuJyk7XG4gICAgICAgIHRoaXMuZW5hYmxlWm9vbSA9ICF2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG5vUm90YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9Sb3RhdGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVSb3RhdGUgaW5zdGVhZC4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAhdGhpcy5lbmFibGVSb3RhdGU7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1JvdGF0ZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVJvdGF0ZSBpbnN0ZWFkLidcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5lbmFibGVSb3RhdGUgPSAhdmFsdWU7XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBub1Bhbjoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVEhSRUUuT3JiaXRDb250cm9sczogLm5vUGFuIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUGFuIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiAhdGhpcy5lbmFibGVQYW47XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicpO1xuICAgICAgICB0aGlzLmVuYWJsZVBhbiA9ICF2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG5vS2V5czoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLmVuYWJsZUtleXM7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub0tleXMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVLZXlzIGluc3RlYWQuJyk7XG4gICAgICAgIHRoaXMuZW5hYmxlS2V5cyA9ICF2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIHN0YXRpY01vdmluZzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnVEhSRUUuT3JiaXRDb250cm9sczogLnN0YXRpY01vdmluZyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZURhbXBpbmcgaW5zdGVhZC4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb25zdHJhaW50LmVuYWJsZURhbXBpbmc7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5zdGF0aWNNb3ZpbmcgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVEYW1waW5nIGluc3RlYWQuJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnQuZW5hYmxlRGFtcGluZyA9ICF2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIGR5bmFtaWNEYW1waW5nRmFjdG9yOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuZHluYW1pY0RhbXBpbmdGYWN0b3IgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIC5kYW1waW5nRmFjdG9yIGluc3RlYWQuJ1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJhaW50LmRhbXBpbmdGYWN0b3I7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5keW5hbWljRGFtcGluZ0ZhY3RvciBoYXMgYmVlbiByZW5hbWVkLiBVc2UgLmRhbXBpbmdGYWN0b3IgaW5zdGVhZC4nXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29uc3RyYWludC5kYW1waW5nRmFjdG9yID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBPcmJpdENvbnRyb2xzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=